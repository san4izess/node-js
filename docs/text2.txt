МІНІСТЕРСТВО ОСВІТИ І НАУКИ  УКРАЇНИ
ВІДКРИТИЙ МІЖНАРОДНИЙ УНІВЕРСИТЕТ РОЗВИТКУ ЛЮДИНИ «УКРАЇНА»





КУРСОВИЙ ПРОЕКТ

на тему : «Розробка гри Тетріс на мові Java»
з дисципліни: «Об’єктно-орієнтоване програмування»

студента 2 курсу групи ПІ-21-1
спеціальності «Інженерія програмного забезпечення»
Черненка О.О.
Керівник:____________________
(Прізвище та ініціали)
Національна шкала __________________
Кількість балів_________________

  Члени комісії        ______         
(підпис)
                              __________  
 (підпис)
                                    _________   
               (підпис)




Київ 2023 
МІНІСТЕРСТВО ОСВІТИ І НАУКИ  УКРАЇНИ
ВІДКРИТИЙ МІЖНАРОДНИЙ УНІВЕРСИТЕТ РОЗВИТКУ ЛЮДИНИ «УКРАЇНА»

                                                                                      
                                                                              ЗАТВЕРДЖУЮ
Голова циклової комісії інженерії
 						  програмного забезпечення  
                                                                                   ______________ ++++++++++ 
    
(підпис)
                                                                                         «___» ________2022 р.

ІНДИВІДУАЛЬНЕ ЗАВДАННЯ
на курсовий проект
Студента 2 курсу Черненка Олександра Юрійовича
Спеціальності «Інженерія програмного забезпечення»
Тема: «Розробка гри Тетріс на мові Java»
Вихідні дані: Ігровий модуль “Тетріс”
Зміст текстової частини до курсового проекту:
Вступ
Основні поняття та огляд середовища розробки модуля
Покрокова розробка модуля
Керівництво користувача
Висновки
Список використаних джерел

Дата видачі “30” _03_ 2023 р.        	 		 Керівник 	  	        	_______
								 Завдання отримав	_______ 

Тема: Ігровий модуль “ Тетріс на мові Java ”
Календарний план виконання курсового проекту:
№
п/п	Назва етапу курсового проекту	Термін виконання етапу	Примітка
1.	Отримання теми курсового проекту		
2.	Дослідження літератури за темою проекту		
3.	Проектування алгоритму та діаграм		
4.	Розробка візуальної частини модуля		
5.	Програмна реалізація методів		
6.	Створення презентації до захисту, написання доповіді та попередній захист курсового проекту		
7.	Коригування проекту за результатами попереднього захисту		
8.	Захист курсового проекту		


Студент: Черненко Олександр Юрійович
Керівник:  __________
“____” _____________ 2023 р. 

АНОТАЦІЯ

Курсовий проект містить  сторінок,  рисунки, 1 використаних джерел.

КЛЮЧОВІ СЛОВА: ІГРОВИЙ МОДУЛЬ, ГРА, ТЕТРІС, ІГРОВЕ ПОЛЕ, КЕРУВАННЯ ГРОЮ, ГРАФІКА, АНІМАЦІЯ, JAVA, JDK, VISUAL STUDIO CODE.

Предмет дослідження – ігровий модуль Тетріс на мові Java.
Мета проекту – ознайомлення з середовищем розробки Visual Studio Code, з подальшим виконанням у ньому ігрового модулю, а також вивчення загальних умов побудови програмного забезпечення, методів проектування та розробки; вивчення та засвоєння основ роботи з методами візуального програмування; самостійне визначення функцій та дотримання умов розробки програмного забезпечення, супровід та налагодження сучасного програмного забезпечення з використанням загальних методів розробки візуальних програм.
Курсовий проект виконаний в Visual Studio Code пояснювальна записка до курсового проекту створена у текстовому редакторі Microsoft Word.

 
ЗМІСТ

ВСТУП	3
РОЗДІЛ 1. ОСНОВНІ ПОНЯТТЯ ТА ВИЗНАЧЕННЯ	4
1.1 Основні відомості про програмний модуль ”Облік кадрів”	4
1.2 Опис засобів програмної реалізації	8
1.3 Постановка задачі	10
РОЗДІЛ 2. ПОКРОКОВА РОЗРОБКА МОДУЛЯ	11
2.1 Проектування UML діаграми	11
2.2 Схема алгоритму програмного модулю	14
2.3 Програмна реалізація модулю “Тетріс на мові Java”	15
РОЗДІЛ 3. КЕРІВНИЦТВО КОРИСТУВАЧА	22
3.1 Системні вимоги до програмного модулю	22
3.2 Керівництво користувача	23
ВИСНОВКИ	28
СПИСОК ВИКОРИСТАНОЇ  ЛІТЕРАТУРИ	29

 
ВСТУП

Ігри завжди привертали увагу людей і є популярним способом проведення вільного часу. Гра Тетріс, розроблена Олексієм Пажитновим у 1984 році, досі не втрачає своєї актуальності та залишається однією з найпопулярніших комп'ютерних ігор.
Метою даної курсової роботи є розробка гри Тетріс мовою програмування Java. Для досягнення цієї мети необхідно вивчити алгоритми і структури даних та ООП, що використовуються при розробці комп'ютерних ігор, а також основні концепції мови Java.
У роботі буде представлено опис процесу розроблення гри Тетріс мовою Java, включно зі створенням графічного інтерфейсу, реалізацією ігрових механік, а також алгоритмами керування ігровим процесом. Крім того, буде розглянуто питання оптимізації продуктивності гри та забезпечення її стабільної роботи.
Результатом цієї курсової роботи буде повноцінна гра Тетріс мовою Java, готова до запуску та використання.




Відпочинок – проведення часу, метою якого є відновлення нормального стану
організму. Одним з видів відпочинку є комп’ютерні ігри. Найбільш популярними
жанрами комп’ютерних ігор є: шутери, стратегії, екшн ігри. Про те, як впливають
ігри на людей, говориться в багатьох посібниках, статтях, газетах і журналах.
Наприклад, нещодавнє дослідження опубліковане в журналі PLоS ONE виявило
користь ігор для людей похилого віку. Саме під час ігор відбувається обдумування
питань, пов’язаних з роботою, побутовими проблемами, здоров’ям. Успішне обмірковування питань, які пов’язані з життям людини, відбувається при
концентрації уваги на одному процесі, в якому ігри грають важливу роль.
	Комп’ютерні ігри – це такі програми, які створені, щоб розважати людину,
займати вільний час. Граючи в комп’ютерні ігри, люди розслабляються, йдуть з
головою у віртуальний світ. в цілому відеоігри не можна вважати повністю
шкідливими або повністю корисними - в тому, як вони діють на мозок, є нюанси,
які залежать як від самої гри, так і від особливостей конкретної людини.
	Популярність комп‘ютерних ігор зростає з кожним роком, ніша ринків
дозвілля постійно потребує поповнень новими ігровими засобами. Ігрова індустрія
постійно розробляє нові інструментальні засоби для полегшення та пришвидшення
процесу розробки ігор. Велика різноманітність, конкурентоздатність, специфічність
використання, зміна актуальності використаних технологій роблять задачу вибору
засобів розробки гри неоднозначною.
	Вищенаведене обумовлює актуальність теми курсового проекту, яка
присвячена розробці ігрового програмного модуля «Тетріс».
 

 
РОЗДІЛ 1. ОСНОВНІ ПОНЯТТЯ ТА ВИЗНАЧЕННЯ

1.1	Основні відомості про гру «Тетріс»
Тетріс є однією з найпопулярніших ігор у світі, яка з'явилася в 1984 році. Ця гра полягає в тому, щоб заповнювати рядки блоками, які падають зверху до нижньої межі поля гри. Гравець може керувати блоками, зміщуючи їх вправо або вліво, повертаючи їх або прискорюючи падіння. Метою гри є заповнення рядків, щоб вони зникли, і таким чином отримати бали. Гра закінчується, якщо блоки досягають верхньої межі поля.
Тетріс можна зіграти на різних платформах, в тому числі на Java. Для написання гри на Java можна використовувати бібліотеку Swing, яка дозволяє створювати графічні інтерфейси користувача (GUI) та забезпечує можливість малювання на екрані. Щоб забезпечити роботу гри, потрібно створити клас, який буде керувати логікою гри, а також клас, який буде керувати графічним інтерфейсом.
Клас, що керує логікою гри, повинен мати методи для обробки рухів блоків, перевірки чи є заповнені рядки, і т.д. Клас, що керує графічним інтерфейсом, повинен мати можливість малювати блоки на екрані, рухати їх, слідкувати за рівнем гри та балами, і т.д. Також потрібно забезпечити можливість управління грою за допомогою клавіш клавіатури або миші.
	В загальному, розробка Тетрісу на Java може бути цікавим та викликом для програмістів, що мають бажання покращити свої навички у використанні програмного модулю "Тетріс" полягає в тому, що він дозволяє користувачеві грати в цю гру безпосередньо на комп'ютері, що значно полегшує доступ до гри та збільшує зручність її використання.
Основні функції програмного модулю "Тетріс" полягають у забезпеченні гравцям зручного і інтуїтивно зрозумілого інтерфейсу, який містить такі елементи, як поле гри, вікно з результатами, кнопки управління тощо. Для більшої зручності гравців, програмний модуль має можливість змінювати складність гри та швидкість падіння фігур.

Основною мовою програмування для створення програмного модулю "Тетріс" є Java. Java є мовою програмування загального призначення, яка використовується для створення різноманітних програмних продуктів, включаючи веб-додатки, мобільні додатки та ігри.
Використання Java для створення програмного модулю "Тетріс" має декілька переваг. По-перше, Java є переносимою мовою програмування, що дозволяє запускати програми, створені на цій мові, на будь-яких операційних системах. По-друге, Java має велику кількість готових бібліотек та інструментів для створення ігор, що дозволяє програмістам швидко розробляти програмний модуль "Тетріс" та робити його більш функціональним.
Таким чином, програмний модуль "Тетріс" на Java є одним з прикладів реалізації класичної гри на цій мові програмування. Його код може складатися з низки класів, що взаємодіють між собою і реалізують різні аспекти гри: ігрове поле, блоки-фігури, рух блоків-фігур, графічний інтерфейс користувача тощо.
Для реалізації гри можна використати таку Java-технологію, як Java Swing.
	Java Swing забезпечує можливості для створення багатофункціональних та привабливих графічних інтерфейсів, включаючи кнопки, поля введення, списки, таблиці, вкладки та інші компоненти. Крім того, Swing дозволяє розробникам створювати власні компоненти та перевизначати стандартні компоненти за потреби.
Swing базується на моделі подій, де користувачі можуть взаємодіяти з графічним інтерфейсом за допомогою подій, що генеруються користувачем, таких як натискання кнопок миші, введення тексту тощо. Розробники можуть відслідковувати ці події та відповідно реагувати на них.
Одним із головних переваг Swing є те, що він є кросплатформовим, тобто код написаний на Java з використанням Swing буде працювати на будь-якій платформі, яка підтримує віртуальну машину Java (JVM). Крім того, Swing має багато функціональних можливостей та добре документований.

У загальному, Java Swing є потужним інструментом для створення графічних інтерфейсів у Java та забезпечує розробникам можливість створювати складні та привабливі GUI додатки.
Загалом, розробка гри на Java може бути цікавим та захоплюючим завданням для програмістів будь-якого рівня, а гра "Тетріс" може бути чудовим вибором для першого досвіду розробки ігор.

1.2 Опис засобів програмної реалізації
Для розробки програмного застосунку "Тетріс" на мові програмування Java було обране середовище розробки Visual Studio Code з використанням JDK. Обираючи це середовище, було враховано наступні переваги:
1.	Visual Studio Code - це зручне і легке у використанні середовище розробки з відкритим вихідним кодом, що підтримує роботу з різними мовами програмування.
2.	Завдяки вбудованому розширенню Java Extension Pack у Visual Studio Code, розробка програмного застосунку на мові Java стала ще більш зручною і швидкою.
3.	JDK (Java Development Kit) - це набір інструментів для розробки програм на мові Java, що включає компілятор, віртуальну машину і інші необхідні для розробки компоненти.
4.	Використання Visual Studio Code з JDK дає можливість розробляти і відлагоджувати програми на мові Java безпосередньо в середовищі розробки.
5.	Visual Studio Code - це безкоштовне середовище розробки, що дозволяє студентам та початківцям розробникам ефективно працювати з проектами на мові Java.
ООП є основою багатьох мов програмування, включаючи Java. За допомогою JDK, можна розробляти та виконувати Java-програми в VS Code. Основними концепціями ООП в Java є класи, об'єкти, успадкування, інкапсуляція та поліморфізм.
Клас в Java - це шаблон, з якого створюються об'єкти. Він містить поля (змінні) та методи (функції), які описують поведінку об'єкта. Об'єкт в Java є екземпляром класу, що містить конкретні значення полів. Інкапсуляція полягає у тому, що дані, що відносяться до класу, зберігаються та обробляються тільки в межах класу та не доступні ззовні.
Успадкування в Java дає можливість створювати новий клас на основі вже існуючого. Новий клас, який успадковує властивості батьківського класу, називається підкласом. Це дозволяє перевикористовувати код та розширювати його можливості.
Поліморфізм означає, що багато класів може мати один метод з однаковою назвою, але з різною реалізацією. Це дає змогу звертатися до методів різних класів однаковою назвою та мати різне поведінку в залежності від класу об'єкта.


1.3 Постановка задачі
Відповідно до теми курсового проекту поставлені наступні завдання:
1.	Дослідити літературу на тему об’єктно – орієнтованого програмування, середовище розробки програмного забезпечення Microsoft Visual Studio Code;
2.	Спроектувати UML-діаграми;
3.	Спроектувати схеми алгоритму;
4.	Розробити програмний модуль гри «2048»;
5.	Створити керівництво користувача.
  
РОЗДІЛ 2. ПОКРОКОВА РОЗРОБКА МОДУЛЯ

2.1 Проектування UML діаграми
Розробка програмного модуля “Тетріс” розпочинається зі створення спеціальної UML-діаграми, що схематично відображає функціонал, а також дії, що в подальшому будуть виконуватись програмою.
IBM Rational Rose – це сучасний інтегрований інструментарій для проектування архітектури, аналізу, моделювання й розробки програмних систем. Саме в IBM Rational Rose мова UML стала базовою технологією візуалізації й розробки програмних систем, що визначило популярність і стратегічну перспективність цього інструментарію.
UML (Unified Modeling Language) – уніфікована мова об'єктно- орієнтованого моделювання, використовується у парадигмі об'єктно- орієнтованого програмування. Є невід'ємною частиною уніфікованого процесу розробки програмного забезпечення.
UML може бути застосовано на всіх етапах життєвого циклу аналізу бізнес- систем і розробки додатків. Різні види діаграм які підтримуються UML, і найбагатший набір можливостей представлення певних аспектів системи робить UML універсальним засобом опису як програмних, так і ділових систем.
Use Case – це сценарна техніка опису взаємодії. За допомогою Use Case може бути описана і призначена вимога для користувача, вимога до взаємодії систем і опис взаємодії людей і компаній в реальному житті.
Актор (Actor) – це абстрактне поняття, що характеризує зовнішнього користувача (користувачів), взаємодіючих із системою. Актор є роллю, що можуть виконувати люди або об’єкти.
Прецедент (Use case) – це короткий опис сценаріїв для одного завдання або
мети.


Рисунок.2.1 – Діаграма прецедентів для модулю “ ”

На цій UML-діаграмі зображено, що програмний модуль буде мати змогу оперувати даними з бази даних, додавати записи, видаляти їх а також відкривати довідку про розробника, оглядати керівництво користувача.
На рис.2.2 зображено діаграму классів для розроблюваного програмного модулю “”.

Рисунок.2.2 – Діаграма класів для модулю “ ”


 
2.2 Схема алгоритму програмного модулю
	Схема алгоритму – це спосіб представлення алгоритму в графічній формі, у вигляді геометричних фігур, сполучених між собою лініями. Форма блока визначає тип дії, а текст всередині блоку дає детальне пояснення конкретної дії.(Схема алгоритму наведена на Рис 2.1).

Рисунок.2.3 – Схема алгоритму програмного модулю
2.3 Програмна реалізація модулю “Облік кадрів”
Програмна реалізація починається зі створення нового проеку Windows VCL Application з додатком в програмі Rad Studio C++ Builder. Вибране ім’я для проекту –слово OblKadr, що символічно в умовах курсового проекту. Після того як рішення створено, відкривається головна сторінка коду елементу StartForm, стартової форми усього проекту, що забезпечує функціонування інших форм. Для зручності, це зображено на Рис.2.3.
 
Рисунок.2.4 – Сторінка конструктора Start_Form та елемент форми
Зліва-знизу, зображуються параметри форми Start_Form.
Ця форма хоч і не явяється функціональною по задачі роботи, вона підтримує у відкритому стані інші компоненти та форми програмного модулю без яких вони не зможуть функціонувати та бути запущені.
Після цієї форми, йде головне меню програми, що виконує функцію відкриття інших компонентів. На його формі йде інформація про версію програмного модулю, а також чотири кнопки, що відкривають наступні форми:
1)	Керівництво користувача.
2)	Переглянути довідку.
3)	Робота зі структурами підприємства.
4)	Завантажити базу кадрів.
5)	Завершити роботу.
Рис.2.5 зображає їх розташування на формі:
 
Рисунок.2.5 – Форма “Main_Menu” та її елементи.
По порядку, далі йде форма “Робота зі структурами підприємства”. Вона представляє з себе частину програмного модулю, в якій виконуються операції з базою даних MS Access. Рис 2.6 відображає її для наглядності.
 
Рисунок.2.6– Форма Struct_Info 
На формі Struct_Info знаходяться такі елементи, як ADOTable, ADOConnection, DataSource1, DBGrid1, та три компонента TButton[9]. 
	ADOTable для успішного виконання своїх цілей та роботи, спочатку потрібно підключити до ADOConnection. Її, в свою чергу потрібно підключити через характеристику ConnectionString, що зображена на Рис 2.7.
 
Рисунок.2.7 – Параметр ConnectionString у підключеній формі.
Якщо два рази натиснути на вищевказане поле, відкриється вікно з вибором типу підключення бази даних до форми(Рис 2.8).
 
Рисунок.2.8 – Вибір варіанту підключення
Після натискання кнопки Build, відкриється вікно з типом включених даних(Рис 2.9), тобто який тип провайдеру до бази даних використати. Так як база даних у нас 2019 року, їй підійде  MS Office 16.0 Access Database Engine OLE DB Provider. Для більш старих версій використовуйте 12.0 а також 4.0 версії провайдерів[10].
 
Рисунок.2.9 – Типи провайдерів даних
Після, нажимаємо кнопку Далее, відкривається нове вікно (Рис.2.10), де у поле “Источник Данних” вказуємо шлях до нашої бази даних, нажимаємо кнопку “Проверить соединение”, для того щоб впевнитись у надійності зв’язку.
 
Рисунок.2.10 – Вікно додавання шляху до бази даних
Коли компонент ADOConnection1 приєднано до бази, можна переходити до ADOTable. У його властивостях, вибираємо у полі Connection нашу ADOConnection1, а у полі TableName вибираємо таблицю “Структури”. Далі, відкриваємо компонент DataSource1, у ньому вказуємо в параметр DataSet нашу ADOTable1. У DBGrid підключаємо DataSource1 для того щоб відображались дані з таблиці “Структури”(Рис 2.11)[10]. 
 
Рисунок.2.11 – Підключена база даних до компоненту DBGrid1
Код форми Struct_Info має такий вигляд:
Підключені біблотеки та компоненти до даної форми:
#include <vcl.h>
#include <StructInfoAdd.h>
#pragma hdrstop
#include "StructInfo.h"
Код для кнопки “Додати нову структуру”:
void __fastcall TStruct_Info::Button1Click(TObject *Sender)
{
   Struct_Info_Add -> Show();
}
//---------------------------------------------------------------------------
Код для кнопки оновлення ADOTable1.
void __fastcall TStruct_Info::Button2Click(TObject *Sender)
{
	ADOTable1 -> Active = false;
	ADOTable1 -> Active = true;
}
Код для видалення вибраного рядку в базі даних
void __fastcall TStruct_Info::Button3Click(TObject *Sender)
{
    ADOTable1 -> Delete();
}
Для того щоб додати нову структуру, потрібно нажати на відповідну кнопку. Тоді, відкриється форма з назвою Struct_Info_Add. У ній пристуні майжеусі компоненти підключення що використовувались у Struct_Info. Також, є 3 компоненти TDBEdit, TDBComboBox1, та 2 TButton. 3 компоненти типу TDBEdit використовуються для вводу даних в таблицю “Структури”, в ComboBox можна вибором випадаючого списку виставити потрібний організаційний рівень структурі(Рис 2.12).
 
Рисунок.2.12 – Вікно для вводу інформації про нову структуру
Код що перемикає режим роботи ADOTable1 та робить можливим додавання нової інформації:
void __fastcall TStruct_Info_Add::FormActivate(TObject *Sender)
{
   ADOTable1 -> Insert();
Дії, що виконуються при натисканні клавіші “Зберегти та вийти”(Подібні є у формі заповнення для працівників(Рис 2.13)):
	ADOTable1 -> Post();
	Struct_Info_Add -> Close();
	Struct_Info -> ADOTable1 -> Active = false;
	Struct_Info -> ADOTable1 -> Active = true;
 
Рисунок.2.13 – Форма вводу інформації до таблиці працівників

РОЗДІЛ 3. КЕРІВНИЦТВО КОРИСТУВАЧА

3.1 Системні вимоги до програмного модулю
До кожної програми завжди існують окремі системні вимоги, що показують здатність ПЗ нормально функціонувати на різних персональних комп’ютерах. В першу чергу, вони визначаються тим наскільки майстерно працює програміст, або тим наскільки велика, тяжка, або неуміло зроблена програма. Через те, що з кожним роком підвищується рівень технічного розвитку комплектуючих для комп’ютерів, розробники мають все більше та більше можливостей для розробки та послаблень зі сторони грамотної розробки. 
Мінімальні системні вимоги – це набір умов, необхідних для можливості запуску і роботи програмного продукту. Проте, наявність мінімальних системних вимог не відміняє можливість запуску ПЗ на комп'ютерах, які за характеристиками слабкіше за мінімальних. 
Рекомендовані системні вимоги – набір характеристик, що мають на увазі оптимальну роботу більшої частини можливостей продукту. Проте, навіть якщо комп'ютер і підходить під рекомендовані системні вимоги, це не означає високої продуктивності ПЗ.
Вимоги до апаратних систем часто визначають версію операційної системи, тип процесора, розмір пам’яті, наявний простір на диску та додаткові периферійні пристрої, якщо такі є необхідними. 
Вимоги до програмного забезпечення, крім вищезазначених вимог, можуть також визначати додаткові залежності від програмного забезпечення (наприклад, бібліотеки, версія драйвера, рамкова версія). Деякі виробники апаратного абопрограмного забезпечення пропонують програму помічника оновлення, яку користувачі можуть завантажувати та запускати, щоб визначити, чи відповідає їх система вимогам продукту
Окрім системних, тут присутні також деякі вимоги з програмної частини. Для того щоб програмний модуль “Облік кадрів” працював коректно, потрібно мати встановленим на персональному комп’ютері  MS Office разом з програмним модулем MS Access. MS Access відіграє важливу роль бази даних для “Облік кадрів”, тому без нього робота неможлива. Самі по собі, програмні модулі розроблені на C++, а саме Windows Standard Applications, невибагливі до апаратної частини  персональних комп’ютерів. 
Використовувати програмний модуль “Облік кадрів” можна лише на операційній системі Windows 10, бо розробка проводилась лише для цієї версії ОС.
Системні вимоги до програмного модулю “Облік кадрів”:
Мінімальні:
Процесор: 1,0 ГГц
Оперативна пам'ять: 128 Мбайт
Відеокарта: DirectX 9-сумісна
Жорсткий диск: 50  Мбайт вільного простору
Рекомендовані:
Процесор: Intel pentium 4 2,4 ГГц
Оперативна пам'ять: 256 Мбайт
Відеокарта: DirectX 9-сумісна
Жорсткий диск диск: 512 Мбайт вільного простору
DirectX: 9
Ці системні вимоги розроблено згідно існуючої версії програмного модулю. Вільне місце на диску може бути менше або більше через те, що сама база даних може містити різну кількість даних. Одна з найбільш важливих частин (критичних) це наявність MS Access, про що було написано вище.

3.2 Керівництво користувача
Перш за все, користувач отримує папку (або архів з папкою) з написом Release. Це значить про те, що у нього програмний модуль випускної версії розробки, а не Debug версія. Після цього, потрібно відкрити папку (або розархівувати .rar файл та відкрити). Файли, що знаходяться в ній матимуть вигляд як на Рис 3.1.
 
Рисунок.3.1 – Вигляд папки з файлами програмного модулю.
Після, користувач має відкрити файл з розширенням .exe під назвою OblKadr (разом це має вигляд OblKadr.exe). Перед користувачем відкриється стартове меню програми(рис 3.2).
 
Рисунок.3.2 – Стартове вікно програми.
Після натискання кнопки Старт, відкриється головне меню програмного модулю.

 
Рисунок.3.3 – Запущене відображення бази даних програмного модулю.
Для роботи з Кадрами, користувач має натиснути кнопку “Завантажити базу кадрів”.
Для роботи з Структурами підприємства, натискається кнопка “Робота зі структурами підприємства”(Рис 3.4).
 
Рисунок.3.4 – Вікна кадрів та структур
 
Для того, щоб додати новий пункт в базу даних, потрібно слідувати по цим пунктам:
1)	Натиснути на кнопку додати нового працівника(структуру).
2)	Обов’язково заповнити усі відповідні поля у формах вводу для працівника(або структури)(рис 3.5).
 
Рисунок.3.5 – Поля для вводу даних у таблицю
3)	Натиснути на кнопку “Зберегти та вийти”.
4)	Оновити таблицю натиснувши на відповідну кнопку.
5)	Новий запис додано до вашої таблиці.
Для видалення стрічки з таблиці даних потрібно:
1)	Натиснути лівою кнопкою миші на необхідну для видалення стрічку.
2)	Натиснути на кнопку “Видалити”.
3)	Після того як запис було видалено, користувач натискає на кнопку “Оновити таблицю”.
Загалом, функцію збереження даних було реалізовано за допомогою кнопки
“Оновити базу даних”, що є однозначно плюсом. Кожний раз, коли користувач оновлюєте базу, шанс на те що ваші дані зникнуть значно зменшується. Завжди перед завершенням роботи бажано зберігати дані(Рис 3.6).
Створений програмний модуль “Облік кадрів” має достатню кількість можливостей для розуміння, а також прямого використання користувачем. Робоча база даних є головним аспектом програми, а доступний інтерфейс дозволяє за лічені хвилини навчити людину використовувати цей програмний модуль
 
Рисунок.3.6 – Збережена таблиця Працівники 
 
ВИСНОВКИ
В результаті виконання курсового проекту по створенню програмного модулю “Облік кадрів”, було освоєно різноманітні джерела інформації а також методи їх використання. Аналітичним методом було досліджено широкий спект сервісів та доступних для освоєння матеріалів з веб, а також написаних авторами ресурсів та книг.
На етапі аналізу вимог, створено концепт майбутньої програми. Програмний модуль “Облік кадрів” є простим та легким для користування аніж сторонні продукти, що занадто складні та вимагають додаткових знань у працівника та зазвичай додаткового налаштування. 
На етапі проектування визначено дії та функції майбутньої програми, схематично визначено скелет ПЗ і створено UML схеми проекту.
Експериментальним методом протягом всього шляху розробки та проектування визначались особливості програмного модулю що до функцій доступних для виконання, а також аналізувалась мова програмування високого рівню для використання у середовищі RAD STUDIO – C++Builder 10.4. 
У результаті кропітливої роботи, був створений програмний модуль на базі Windows Standart App, що відповідав поставленим задачам. Проста за оформлення, але доступна для розуміння будь якого користувача, “Облік кадрів” відкрила достатній спектр функцій для ведення обліку кадрів. Швидкий зв’язок з базою даних дозволив полегшити навантаження ПК, а новітні засоби створення зменшили кількість рядків написаних користувачем.
Створений модуль є гарним прикладом виконання проекту перспективної галузі по обліку кадрів. Як говорилось у вступі, її завдання – полегшити доступ до системи працівників, їх параметрів, таких як заробітна плата, робочі години, і тому подібних, за якими проводиться розрахунок інших дій підприємства або компанії, які напряму впливають на її успішність та темпи розвитку.



СПИСОК ВИКОРИСТАНОЇ  ЛІТЕРАТУРИ
1.	https://business.diia.gov.ua/cases/hr/kadrove-dilovodstvo-vazliva-skladova-efektivnogo-upravlinna-personalom
2.	https://solutions.1c.ru/catalog/agr-buh-bel/features3
3.	https://andeesoft.com/ua/kpu/
4.	http://kadri.chizh.ua/?page_id=1114 /
5.	Троелсен и Джепикс. Язык програмирования С++  и платформы .NET и .NET Core. 2019 р. ДІАЛЕКТИКА, Україна
6.	https://www.embarcadero.com/ru/products/rad-studio 
7.	https://www.e-olymp.com/uк/вlogs/posts/26
8.	https://evergreens.com.ua/ua/articles/uml-diagrams.html
9.	BHV-СПб. Visual C++ на примерах  2006 р. Россия
10.	Культин Н. Б. Самоучитель C++ Builder  2004 р. СамИздат, Россия


МІНІСТЕРСТВО ОСВІТИ І НАУКИ  УКРАЇНИ
ВІДКРИТИЙ МІЖНАРОДНИЙ УНІВЕРСИТЕТ РОЗВИТКУ ЛЮДИНИ «УКРАЇНА»





КУРСОВИЙ ПРОЕКТ

на тему : «Розробка гри Тетріс на мові Java»
з дисципліни: «Об’єктно-орієнтоване програмування»

студента 2 курсу групи ПІ-21-1
спеціальності «Інженерія програмного забезпечення»
Черненка О.О.
Керівник:____________________
(Прізвище та ініціали)
Національна шкала __________________
Кількість балів_________________

  Члени комісії        ______         
(підпис)
                              __________  
 (підпис)
                                    _________   
               (підпис)




Київ 2023 
МІНІСТЕРСТВО ОСВІТИ І НАУКИ  УКРАЇНИ
ВІДКРИТИЙ МІЖНАРОДНИЙ УНІВЕРСИТЕТ РОЗВИТКУ ЛЮДИНИ «УКРАЇНА»

                                                                                      
                                                                              ЗАТВЕРДЖУЮ
Голова циклової комісії інженерії
 						  програмного забезпечення  
                                                                                   ______________ ++++++++++ 
    
(підпис)
                                                                                         «___» ________2022 р.

ІНДИВІДУАЛЬНЕ ЗАВДАННЯ
на курсовий проект
Студента 2 курсу Черненка Олександра Юрійовича
Спеціальності «Інженерія програмного забезпечення»
Тема: «Розробка гри Тетріс на мові Java»
Вихідні дані: Ігровий модуль “Тетріс”
Зміст текстової частини до курсового проекту:
Вступ
Основні поняття та огляд середовища розробки модуля
Покрокова розробка модуля
Керівництво користувача
Висновки
Список використаних джерел

Дата видачі “30” _03_ 2023 р.        	 		 Керівник 	  	        	_______
								 Завдання отримав	_______ 

Тема: Ігровий модуль “ Тетріс на мові Java ”
Календарний план виконання курсового проекту:
№
п/п	Назва етапу курсового проекту	Термін виконання етапу	Примітка
1.	Отримання теми курсового проекту		
2.	Дослідження літератури за темою проекту		
3.	Проектування алгоритму та діаграм		
4.	Розробка візуальної частини модуля		
5.	Програмна реалізація методів		
6.	Створення презентації до захисту, написання доповіді та попередній захист курсового проекту		
7.	Коригування проекту за результатами попереднього захисту		
8.	Захист курсового проекту		


Студент: Черненко Олександр Юрійович
Керівник:  __________
“____” _____________ 2023 р. 

АНОТАЦІЯ

Курсовий проект містить  сторінок,  рисунки, 1 використаних джерел.

КЛЮЧОВІ СЛОВА: ІГРОВИЙ МОДУЛЬ, ГРА, ТЕТРІС, ІГРОВЕ ПОЛЕ, КЕРУВАННЯ ГРОЮ, ГРАФІКА, АНІМАЦІЯ, JAVA, JDK, VISUAL STUDIO CODE.

Предмет дослідження – ігровий модуль Тетріс на мові Java.
Мета проекту – ознайомлення з середовищем розробки Visual Studio Code, з подальшим виконанням у ньому ігрового модулю, а також вивчення загальних умов побудови програмного забезпечення, методів проектування та розробки; вивчення та засвоєння основ роботи з методами візуального програмування; самостійне визначення функцій та дотримання умов розробки програмного забезпечення, супровід та налагодження сучасного програмного забезпечення з використанням загальних методів розробки візуальних програм.
Курсовий проект виконаний в Visual Studio Code пояснювальна записка до курсового проекту створена у текстовому редакторі Microsoft Word.

 
ЗМІСТ

ВСТУП	3
РОЗДІЛ 1. ОСНОВНІ ПОНЯТТЯ ТА ВИЗНАЧЕННЯ	4
1.1 Основні відомості про програмний модуль ”Облік кадрів”	4
1.2 Опис засобів програмної реалізації	8
1.3 Постановка задачі	10
РОЗДІЛ 2. ПОКРОКОВА РОЗРОБКА МОДУЛЯ	11
2.1 Проектування UML діаграми	11
2.2 Схема алгоритму програмного модулю	14
2.3 Програмна реалізація модулю “Тетріс на мові Java”	15
РОЗДІЛ 3. КЕРІВНИЦТВО КОРИСТУВАЧА	22
3.1 Системні вимоги до програмного модулю	22
3.2 Керівництво користувача	23
ВИСНОВКИ	28
СПИСОК ВИКОРИСТАНОЇ  ЛІТЕРАТУРИ	29

 
ВСТУП

Ігри завжди привертали увагу людей і є популярним способом проведення вільного часу. Гра Тетріс, розроблена Олексієм Пажитновим у 1984 році, досі не втрачає своєї актуальності та залишається однією з найпопулярніших комп'ютерних ігор.
Метою даної курсової роботи є розробка гри Тетріс мовою програмування Java. Для досягнення цієї мети необхідно вивчити алгоритми і структури даних та ООП, що використовуються при розробці комп'ютерних ігор, а також основні концепції мови Java.
У роботі буде представлено опис процесу розроблення гри Тетріс мовою Java, включно зі створенням графічного інтерфейсу, реалізацією ігрових механік, а також алгоритмами керування ігровим процесом. Крім того, буде розглянуто питання оптимізації продуктивності гри та забезпечення її стабільної роботи.
Результатом цієї курсової роботи буде повноцінна гра Тетріс мовою Java, готова до запуску та використання.




Відпочинок – проведення часу, метою якого є відновлення нормального стану
організму. Одним з видів відпочинку є комп’ютерні ігри. Найбільш популярними
жанрами комп’ютерних ігор є: шутери, стратегії, екшн ігри. Про те, як впливають
ігри на людей, говориться в багатьох посібниках, статтях, газетах і журналах.
Наприклад, нещодавнє дослідження опубліковане в журналі PLоS ONE виявило
користь ігор для людей похилого віку. Саме під час ігор відбувається обдумування
питань, пов’язаних з роботою, побутовими проблемами, здоров’ям. Успішне обмірковування питань, які пов’язані з життям людини, відбувається при
концентрації уваги на одному процесі, в якому ігри грають важливу роль.
	Комп’ютерні ігри – це такі програми, які створені, щоб розважати людину,
займати вільний час. Граючи в комп’ютерні ігри, люди розслабляються, йдуть з
головою у віртуальний світ. в цілому відеоігри не можна вважати повністю
шкідливими або повністю корисними - в тому, як вони діють на мозок, є нюанси,
які залежать як від самої гри, так і від особливостей конкретної людини.
	Популярність комп‘ютерних ігор зростає з кожним роком, ніша ринків
дозвілля постійно потребує поповнень новими ігровими засобами. Ігрова індустрія
постійно розробляє нові інструментальні засоби для полегшення та пришвидшення
процесу розробки ігор. Велика різноманітність, конкурентоздатність, специфічність
використання, зміна актуальності використаних технологій роблять задачу вибору
засобів розробки гри неоднозначною.
	Вищенаведене обумовлює актуальність теми курсового проекту, яка
присвячена розробці ігрового програмного модуля «Тетріс».
 

 
РОЗДІЛ 1. ОСНОВНІ ПОНЯТТЯ ТА ВИЗНАЧЕННЯ

1.1	Основні відомості про гру «Тетріс»
Тетріс є однією з найпопулярніших ігор у світі, яка з'явилася в 1984 році. Ця гра полягає в тому, щоб заповнювати рядки блоками, які падають зверху до нижньої межі поля гри. Гравець може керувати блоками, зміщуючи їх вправо або вліво, повертаючи їх або прискорюючи падіння. Метою гри є заповнення рядків, щоб вони зникли, і таким чином отримати бали. Гра закінчується, якщо блоки досягають верхньої межі поля.
Тетріс можна зіграти на різних платформах, в тому числі на Java. Для написання гри на Java можна використовувати бібліотеку Swing, яка дозволяє створювати графічні інтерфейси користувача (GUI) та забезпечує можливість малювання на екрані. Щоб забезпечити роботу гри, потрібно створити клас, який буде керувати логікою гри, а також клас, який буде керувати графічним інтерфейсом.
Клас, що керує логікою гри, повинен мати методи для обробки рухів блоків, перевірки чи є заповнені рядки, і т.д. Клас, що керує графічним інтерфейсом, повинен мати можливість малювати блоки на екрані, рухати їх, слідкувати за рівнем гри та балами, і т.д. Також потрібно забезпечити можливість управління грою за допомогою клавіш клавіатури або миші.
	В загальному, розробка Тетрісу на Java може бути цікавим та викликом для програмістів, що мають бажання покращити свої навички у використанні програмного модулю "Тетріс" полягає в тому, що він дозволяє користувачеві грати в цю гру безпосередньо на комп'ютері, що значно полегшує доступ до гри та збільшує зручність її використання.
Основні функції програмного модулю "Тетріс" полягають у забезпеченні гравцям зручного і інтуїтивно зрозумілого інтерфейсу, який містить такі елементи, як поле гри, вікно з результатами, кнопки управління тощо. Для більшої зручності гравців, програмний модуль має можливість змінювати складність гри та швидкість падіння фігур.

Основною мовою програмування для створення програмного модулю "Тетріс" є Java. Java є мовою програмування загального призначення, яка використовується для створення різноманітних програмних продуктів, включаючи веб-додатки, мобільні додатки та ігри.
Використання Java для створення програмного модулю "Тетріс" має декілька переваг. По-перше, Java є переносимою мовою програмування, що дозволяє запускати програми, створені на цій мові, на будь-яких операційних системах. По-друге, Java має велику кількість готових бібліотек та інструментів для створення ігор, що дозволяє програмістам швидко розробляти програмний модуль "Тетріс" та робити його більш функціональним.
Таким чином, програмний модуль "Тетріс" на Java є одним з прикладів реалізації класичної гри на цій мові програмування. Його код може складатися з низки класів, що взаємодіють між собою і реалізують різні аспекти гри: ігрове поле, блоки-фігури, рух блоків-фігур, графічний інтерфейс користувача тощо.
Для реалізації гри можна використати таку Java-технологію, як Java Swing.
	Java Swing забезпечує можливості для створення багатофункціональних та привабливих графічних інтерфейсів, включаючи кнопки, поля введення, списки, таблиці, вкладки та інші компоненти. Крім того, Swing дозволяє розробникам створювати власні компоненти та перевизначати стандартні компоненти за потреби.
Swing базується на моделі подій, де користувачі можуть взаємодіяти з графічним інтерфейсом за допомогою подій, що генеруються користувачем, таких як натискання кнопок миші, введення тексту тощо. Розробники можуть відслідковувати ці події та відповідно реагувати на них.
Одним із головних переваг Swing є те, що він є кросплатформовим, тобто код написаний на Java з використанням Swing буде працювати на будь-якій платформі, яка підтримує віртуальну машину Java (JVM). Крім того, Swing має багато функціональних можливостей та добре документований.

У загальному, Java Swing є потужним інструментом для створення графічних інтерфейсів у Java та забезпечує розробникам можливість створювати складні та привабливі GUI додатки.
Загалом, розробка гри на Java може бути цікавим та захоплюючим завданням для програмістів будь-якого рівня, а гра "Тетріс" може бути чудовим вибором для першого досвіду розробки ігор.

1.2 Опис засобів програмної реалізації
Для розробки програмного застосунку "Тетріс" на мові програмування Java було обране середовище розробки Visual Studio Code з використанням JDK. Обираючи це середовище, було враховано наступні переваги:
1.	Visual Studio Code - це зручне і легке у використанні середовище розробки з відкритим вихідним кодом, що підтримує роботу з різними мовами програмування.
2.	Завдяки вбудованому розширенню Java Extension Pack у Visual Studio Code, розробка програмного застосунку на мові Java стала ще більш зручною і швидкою.
3.	JDK (Java Development Kit) - це набір інструментів для розробки програм на мові Java, що включає компілятор, віртуальну машину і інші необхідні для розробки компоненти.
4.	Використання Visual Studio Code з JDK дає можливість розробляти і відлагоджувати програми на мові Java безпосередньо в середовищі розробки.
5.	Visual Studio Code - це безкоштовне середовище розробки, що дозволяє студентам та початківцям розробникам ефективно працювати з проектами на мові Java.
ООП є основою багатьох мов програмування, включаючи Java. За допомогою JDK, можна розробляти та виконувати Java-програми в VS Code. Основними концепціями ООП в Java є класи, об'єкти, успадкування, інкапсуляція та поліморфізм.
Клас в Java - це шаблон, з якого створюються об'єкти. Він містить поля (змінні) та методи (функції), які описують поведінку об'єкта. Об'єкт в Java є екземпляром класу, що містить конкретні значення полів. Інкапсуляція полягає у тому, що дані, що відносяться до класу, зберігаються та обробляються тільки в межах класу та не доступні ззовні.
Успадкування в Java дає можливість створювати новий клас на основі вже існуючого. Новий клас, який успадковує властивості батьківського класу, називається підкласом. Це дозволяє перевикористовувати код та розширювати його можливості.
Поліморфізм означає, що багато класів може мати один метод з однаковою назвою, але з різною реалізацією. Це дає змогу звертатися до методів різних класів однаковою назвою та мати різне поведінку в залежності від класу об'єкта.


1.3 Постановка задачі
Відповідно до теми курсового проекту поставлені наступні завдання:
1.	Дослідити літературу на тему об’єктно – орієнтованого програмування, середовище розробки програмного забезпечення Microsoft Visual Studio Code;
2.	Спроектувати UML-діаграми;
3.	Спроектувати схеми алгоритму;
4.	Розробити програмний модуль гри «2048»;
5.	Створити керівництво користувача.
  
РОЗДІЛ 2. ПОКРОКОВА РОЗРОБКА МОДУЛЯ

2.1 Проектування UML діаграми
Розробка програмного модуля “Тетріс” розпочинається зі створення спеціальної UML-діаграми, що схематично відображає функціонал, а також дії, що в подальшому будуть виконуватись програмою.
IBM Rational Rose – це сучасний інтегрований інструментарій для проектування архітектури, аналізу, моделювання й розробки програмних систем. Саме в IBM Rational Rose мова UML стала базовою технологією візуалізації й розробки програмних систем, що визначило популярність і стратегічну перспективність цього інструментарію.
UML (Unified Modeling Language) – уніфікована мова об'єктно- орієнтованого моделювання, використовується у парадигмі об'єктно- орієнтованого програмування. Є невід'ємною частиною уніфікованого процесу розробки програмного забезпечення.
UML може бути застосовано на всіх етапах життєвого циклу аналізу бізнес- систем і розробки додатків. Різні види діаграм які підтримуються UML, і найбагатший набір можливостей представлення певних аспектів системи робить UML універсальним засобом опису як програмних, так і ділових систем.
Use Case – це сценарна техніка опису взаємодії. За допомогою Use Case може бути описана і призначена вимога для користувача, вимога до взаємодії систем і опис взаємодії людей і компаній в реальному житті.
Актор (Actor) – це абстрактне поняття, що характеризує зовнішнього користувача (користувачів), взаємодіючих із системою. Актор є роллю, що можуть виконувати люди або об’єкти.
Прецедент (Use case) – це короткий опис сценаріїв для одного завдання або
мети.


Рисунок.2.1 – Діаграма прецедентів для модулю “ ”

На цій UML-діаграмі зображено, що програмний модуль буде мати змогу оперувати даними з бази даних, додавати записи, видаляти їх а також відкривати довідку про розробника, оглядати керівництво користувача.
На рис.2.2 зображено діаграму классів для розроблюваного програмного модулю “”.

Рисунок.2.2 – Діаграма класів для модулю “ ”


 
2.2 Схема алгоритму програмного модулю
	Схема алгоритму – це спосіб представлення алгоритму в графічній формі, у вигляді геометричних фігур, сполучених між собою лініями. Форма блока визначає тип дії, а текст всередині блоку дає детальне пояснення конкретної дії.(Схема алгоритму наведена на Рис 2.1).

Рисунок.2.3 – Схема алгоритму програмного модулю
2.3 Програмна реалізація модулю “Облік кадрів”
Програмна реалізація починається зі створення нового проеку Windows VCL Application з додатком в програмі Rad Studio C++ Builder. Вибране ім’я для проекту –слово OblKadr, що символічно в умовах курсового проекту. Після того як рішення створено, відкривається головна сторінка коду елементу StartForm, стартової форми усього проекту, що забезпечує функціонування інших форм. Для зручності, це зображено на Рис.2.3.
 
Рисунок.2.4 – Сторінка конструктора Start_Form та елемент форми
Зліва-знизу, зображуються параметри форми Start_Form.
Ця форма хоч і не явяється функціональною по задачі роботи, вона підтримує у відкритому стані інші компоненти та форми програмного модулю без яких вони не зможуть функціонувати та бути запущені.
Після цієї форми, йде головне меню програми, що виконує функцію відкриття інших компонентів. На його формі йде інформація про версію програмного модулю, а також чотири кнопки, що відкривають наступні форми:
1)	Керівництво користувача.
2)	Переглянути довідку.
3)	Робота зі структурами підприємства.
4)	Завантажити базу кадрів.
5)	Завершити роботу.
Рис.2.5 зображає їх розташування на формі:
 
Рисунок.2.5 – Форма “Main_Menu” та її елементи.
По порядку, далі йде форма “Робота зі структурами підприємства”. Вона представляє з себе частину програмного модулю, в якій виконуються операції з базою даних MS Access. Рис 2.6 відображає її для наглядності.
 
Рисунок.2.6– Форма Struct_Info 
На формі Struct_Info знаходяться такі елементи, як ADOTable, ADOConnection, DataSource1, DBGrid1, та три компонента TButton[9]. 
	ADOTable для успішного виконання своїх цілей та роботи, спочатку потрібно підключити до ADOConnection. Її, в свою чергу потрібно підключити через характеристику ConnectionString, що зображена на Рис 2.7.
 
Рисунок.2.7 – Параметр ConnectionString у підключеній формі.
Якщо два рази натиснути на вищевказане поле, відкриється вікно з вибором типу підключення бази даних до форми(Рис 2.8).
 
Рисунок.2.8 – Вибір варіанту підключення
Після натискання кнопки Build, відкриється вікно з типом включених даних(Рис 2.9), тобто який тип провайдеру до бази даних використати. Так як база даних у нас 2019 року, їй підійде  MS Office 16.0 Access Database Engine OLE DB Provider. Для більш старих версій використовуйте 12.0 а також 4.0 версії провайдерів[10].
 
Рисунок.2.9 – Типи провайдерів даних
Після, нажимаємо кнопку Далее, відкривається нове вікно (Рис.2.10), де у поле “Источник Данних” вказуємо шлях до нашої бази даних, нажимаємо кнопку “Проверить соединение”, для того щоб впевнитись у надійності зв’язку.
 
Рисунок.2.10 – Вікно додавання шляху до бази даних
Коли компонент ADOConnection1 приєднано до бази, можна переходити до ADOTable. У його властивостях, вибираємо у полі Connection нашу ADOConnection1, а у полі TableName вибираємо таблицю “Структури”. Далі, відкриваємо компонент DataSource1, у ньому вказуємо в параметр DataSet нашу ADOTable1. У DBGrid підключаємо DataSource1 для того щоб відображались дані з таблиці “Структури”(Рис 2.11)[10]. 
 
Рисунок.2.11 – Підключена база даних до компоненту DBGrid1
Код форми Struct_Info має такий вигляд:
Підключені біблотеки та компоненти до даної форми:
#include <vcl.h>
#include <StructInfoAdd.h>
#pragma hdrstop
#include "StructInfo.h"
Код для кнопки “Додати нову структуру”:
void __fastcall TStruct_Info::Button1Click(TObject *Sender)
{
   Struct_Info_Add -> Show();
}
//---------------------------------------------------------------------------
Код для кнопки оновлення ADOTable1.
void __fastcall TStruct_Info::Button2Click(TObject *Sender)
{
	ADOTable1 -> Active = false;
	ADOTable1 -> Active = true;
}
Код для видалення вибраного рядку в базі даних
void __fastcall TStruct_Info::Button3Click(TObject *Sender)
{
    ADOTable1 -> Delete();
}
Для того щоб додати нову структуру, потрібно нажати на відповідну кнопку. Тоді, відкриється форма з назвою Struct_Info_Add. У ній пристуні майжеусі компоненти підключення що використовувались у Struct_Info. Також, є 3 компоненти TDBEdit, TDBComboBox1, та 2 TButton. 3 компоненти типу TDBEdit використовуються для вводу даних в таблицю “Структури”, в ComboBox можна вибором випадаючого списку виставити потрібний організаційний рівень структурі(Рис 2.12).
 
Рисунок.2.12 – Вікно для вводу інформації про нову структуру
Код що перемикає режим роботи ADOTable1 та робить можливим додавання нової інформації:
void __fastcall TStruct_Info_Add::FormActivate(TObject *Sender)
{
   ADOTable1 -> Insert();
Дії, що виконуються при натисканні клавіші “Зберегти та вийти”(Подібні є у формі заповнення для працівників(Рис 2.13)):
	ADOTable1 -> Post();
	Struct_Info_Add -> Close();
	Struct_Info -> ADOTable1 -> Active = false;
	Struct_Info -> ADOTable1 -> Active = true;
 
Рисунок.2.13 – Форма вводу інформації до таблиці працівників

РОЗДІЛ 3. КЕРІВНИЦТВО КОРИСТУВАЧА

3.1 Системні вимоги до програмного модулю
До кожної програми завжди існують окремі системні вимоги, що показують здатність ПЗ нормально функціонувати на різних персональних комп’ютерах. В першу чергу, вони визначаються тим наскільки майстерно працює програміст, або тим наскільки велика, тяжка, або неуміло зроблена програма. Через те, що з кожним роком підвищується рівень технічного розвитку комплектуючих для комп’ютерів, розробники мають все більше та більше можливостей для розробки та послаблень зі сторони грамотної розробки. 
Мінімальні системні вимоги – це набір умов, необхідних для можливості запуску і роботи програмного продукту. Проте, наявність мінімальних системних вимог не відміняє можливість запуску ПЗ на комп'ютерах, які за характеристиками слабкіше за мінімальних. 
Рекомендовані системні вимоги – набір характеристик, що мають на увазі оптимальну роботу більшої частини можливостей продукту. Проте, навіть якщо комп'ютер і підходить під рекомендовані системні вимоги, це не означає високої продуктивності ПЗ.
Вимоги до апаратних систем часто визначають версію операційної системи, тип процесора, розмір пам’яті, наявний простір на диску та додаткові периферійні пристрої, якщо такі є необхідними. 
Вимоги до програмного забезпечення, крім вищезазначених вимог, можуть також визначати додаткові залежності від програмного забезпечення (наприклад, бібліотеки, версія драйвера, рамкова версія). Деякі виробники апаратного абопрограмного забезпечення пропонують програму помічника оновлення, яку користувачі можуть завантажувати та запускати, щоб визначити, чи відповідає їх система вимогам продукту
Окрім системних, тут присутні також деякі вимоги з програмної частини. Для того щоб програмний модуль “Облік кадрів” працював коректно, потрібно мати встановленим на персональному комп’ютері  MS Office разом з програмним модулем MS Access. MS Access відіграє важливу роль бази даних для “Облік кадрів”, тому без нього робота неможлива. Самі по собі, програмні модулі розроблені на C++, а саме Windows Standard Applications, невибагливі до апаратної частини  персональних комп’ютерів. 
Використовувати програмний модуль “Облік кадрів” можна лише на операційній системі Windows 10, бо розробка проводилась лише для цієї версії ОС.
Системні вимоги до програмного модулю “Облік кадрів”:
Мінімальні:
Процесор: 1,0 ГГц
Оперативна пам'ять: 128 Мбайт
Відеокарта: DirectX 9-сумісна
Жорсткий диск: 50  Мбайт вільного простору
Рекомендовані:
Процесор: Intel pentium 4 2,4 ГГц
Оперативна пам'ять: 256 Мбайт
Відеокарта: DirectX 9-сумісна
Жорсткий диск диск: 512 Мбайт вільного простору
DirectX: 9
Ці системні вимоги розроблено згідно існуючої версії програмного модулю. Вільне місце на диску може бути менше або більше через те, що сама база даних може містити різну кількість даних. Одна з найбільш важливих частин (критичних) це наявність MS Access, про що було написано вище.

3.2 Керівництво користувача
Перш за все, користувач отримує папку (або архів з папкою) з написом Release. Це значить про те, що у нього програмний модуль випускної версії розробки, а не Debug версія. Після цього, потрібно відкрити папку (або розархівувати .rar файл та відкрити). Файли, що знаходяться в ній матимуть вигляд як на Рис 3.1.
 
Рисунок.3.1 – Вигляд папки з файлами програмного модулю.
Після, користувач має відкрити файл з розширенням .exe під назвою OblKadr (разом це має вигляд OblKadr.exe). Перед користувачем відкриється стартове меню програми(рис 3.2).
 
Рисунок.3.2 – Стартове вікно програми.
Після натискання кнопки Старт, відкриється головне меню програмного модулю.

 
Рисунок.3.3 – Запущене відображення бази даних програмного модулю.
Для роботи з Кадрами, користувач має натиснути кнопку “Завантажити базу кадрів”.
Для роботи з Структурами підприємства, натискається кнопка “Робота зі структурами підприємства”(Рис 3.4).
 
Рисунок.3.4 – Вікна кадрів та структур
 
Для того, щоб додати новий пункт в базу даних, потрібно слідувати по цим пунктам:
1)	Натиснути на кнопку додати нового працівника(структуру).
2)	Обов’язково заповнити усі відповідні поля у формах вводу для працівника(або структури)(рис 3.5).
 
Рисунок.3.5 – Поля для вводу даних у таблицю
3)	Натиснути на кнопку “Зберегти та вийти”.
4)	Оновити таблицю натиснувши на відповідну кнопку.
5)	Новий запис додано до вашої таблиці.
Для видалення стрічки з таблиці даних потрібно:
1)	Натиснути лівою кнопкою миші на необхідну для видалення стрічку.
2)	Натиснути на кнопку “Видалити”.
3)	Після того як запис було видалено, користувач натискає на кнопку “Оновити таблицю”.
Загалом, функцію збереження даних було реалізовано за допомогою кнопки
“Оновити базу даних”, що є однозначно плюсом. Кожний раз, коли користувач оновлюєте базу, шанс на те що ваші дані зникнуть значно зменшується. Завжди перед завершенням роботи бажано зберігати дані(Рис 3.6).
Створений програмний модуль “Облік кадрів” має достатню кількість можливостей для розуміння, а також прямого використання користувачем. Робоча база даних є головним аспектом програми, а доступний інтерфейс дозволяє за лічені хвилини навчити людину використовувати цей програмний модуль
 
Рисунок.3.6 – Збережена таблиця Працівники 
 
ВИСНОВКИ
В результаті виконання курсового проекту по створенню програмного модулю “Облік кадрів”, було освоєно різноманітні джерела інформації а також методи їх використання. Аналітичним методом було досліджено широкий спект сервісів та доступних для освоєння матеріалів з веб, а також написаних авторами ресурсів та книг.
На етапі аналізу вимог, створено концепт майбутньої програми. Програмний модуль “Облік кадрів” є простим та легким для користування аніж сторонні продукти, що занадто складні та вимагають додаткових знань у працівника та зазвичай додаткового налаштування. 
На етапі проектування визначено дії та функції майбутньої програми, схематично визначено скелет ПЗ і створено UML схеми проекту.
Експериментальним методом протягом всього шляху розробки та проектування визначались особливості програмного модулю що до функцій доступних для виконання, а також аналізувалась мова програмування високого рівню для використання у середовищі RAD STUDIO – C++Builder 10.4. 
У результаті кропітливої роботи, був створений програмний модуль на базі Windows Standart App, що відповідав поставленим задачам. Проста за оформлення, але доступна для розуміння будь якого користувача, “Облік кадрів” відкрила достатній спектр функцій для ведення обліку кадрів. Швидкий зв’язок з базою даних дозволив полегшити навантаження ПК, а новітні засоби створення зменшили кількість рядків написаних користувачем.
Створений модуль є гарним прикладом виконання проекту перспективної галузі по обліку кадрів. Як говорилось у вступі, її завдання – полегшити доступ до системи працівників, їх параметрів, таких як заробітна плата, робочі години, і тому подібних, за якими проводиться розрахунок інших дій підприємства або компанії, які напряму впливають на її успішність та темпи розвитку.



СПИСОК ВИКОРИСТАНОЇ  ЛІТЕРАТУРИ
1.	https://business.diia.gov.ua/cases/hr/kadrove-dilovodstvo-vazliva-skladova-efektivnogo-upravlinna-personalom
2.	https://solutions.1c.ru/catalog/agr-buh-bel/features3
3.	https://andeesoft.com/ua/kpu/
4.	http://kadri.chizh.ua/?page_id=1114 /
5.	Троелсен и Джепикс. Язык програмирования С++  и платформы .NET и .NET Core. 2019 р. ДІАЛЕКТИКА, Україна
6.	https://www.embarcadero.com/ru/products/rad-studio 
7.	https://www.e-olymp.com/uк/вlogs/posts/26
8.	https://evergreens.com.ua/ua/articles/uml-diagrams.html
9.	BHV-СПб. Visual C++ на примерах  2006 р. Россия
10.	Культин Н. Б. Самоучитель C++ Builder  2004 р. СамИздат, Россия


МІНІСТЕРСТВО ОСВІТИ І НАУКИ  УКРАЇНИ
ВІДКРИТИЙ МІЖНАРОДНИЙ УНІВЕРСИТЕТ РОЗВИТКУ ЛЮДИНИ «УКРАЇНА»





КУРСОВИЙ ПРОЕКТ

на тему : «Розробка гри Тетріс на мові Java»
з дисципліни: «Об’єктно-орієнтоване програмування»

студента 2 курсу групи ПІ-21-1
спеціальності «Інженерія програмного забезпечення»
Черненка О.О.
Керівник:____________________
(Прізвище та ініціали)
Національна шкала __________________
Кількість балів_________________

  Члени комісії        ______         
(підпис)
                              __________  
 (підпис)
                                    _________   
               (підпис)




Київ 2023 
МІНІСТЕРСТВО ОСВІТИ І НАУКИ  УКРАЇНИ
ВІДКРИТИЙ МІЖНАРОДНИЙ УНІВЕРСИТЕТ РОЗВИТКУ ЛЮДИНИ «УКРАЇНА»

                                                                                      
                                                                              ЗАТВЕРДЖУЮ
Голова циклової комісії інженерії
 						  програмного забезпечення  
                                                                                   ______________ ++++++++++ 
    
(підпис)
                                                                                         «___» ________2022 р.

ІНДИВІДУАЛЬНЕ ЗАВДАННЯ
на курсовий проект
Студента 2 курсу Черненка Олександра Юрійовича
Спеціальності «Інженерія програмного забезпечення»
Тема: «Розробка гри Тетріс на мові Java»
Вихідні дані: Ігровий модуль “Тетріс”
Зміст текстової частини до курсового проекту:
Вступ
Основні поняття та огляд середовища розробки модуля
Покрокова розробка модуля
Керівництво користувача
Висновки
Список використаних джерел

Дата видачі “30” _03_ 2023 р.        	 		 Керівник 	  	        	_______
								 Завдання отримав	_______ 

Тема: Ігровий модуль “ Тетріс на мові Java ”
Календарний план виконання курсового проекту:
№
п/п	Назва етапу курсового проекту	Термін виконання етапу	Примітка
1.	Отримання теми курсового проекту		
2.	Дослідження літератури за темою проекту		
3.	Проектування алгоритму та діаграм		
4.	Розробка візуальної частини модуля		
5.	Програмна реалізація методів		
6.	Створення презентації до захисту, написання доповіді та попередній захист курсового проекту		
7.	Коригування проекту за результатами попереднього захисту		
8.	Захист курсового проекту		


Студент: Черненко Олександр Юрійович
Керівник:  __________
“____” _____________ 2023 р. 

АНОТАЦІЯ

Курсовий проект містить  сторінок,  рисунки, 1 використаних джерел.

КЛЮЧОВІ СЛОВА: ІГРОВИЙ МОДУЛЬ, ГРА, ТЕТРІС, ІГРОВЕ ПОЛЕ, КЕРУВАННЯ ГРОЮ, ГРАФІКА, АНІМАЦІЯ, JAVA, JDK, VISUAL STUDIO CODE.

Предмет дослідження – ігровий модуль Тетріс на мові Java.
Мета проекту – ознайомлення з середовищем розробки Visual Studio Code, з подальшим виконанням у ньому ігрового модулю, а також вивчення загальних умов побудови програмного забезпечення, методів проектування та розробки; вивчення та засвоєння основ роботи з методами візуального програмування; самостійне визначення функцій та дотримання умов розробки програмного забезпечення, супровід та налагодження сучасного програмного забезпечення з використанням загальних методів розробки візуальних програм.
Курсовий проект виконаний в Visual Studio Code пояснювальна записка до курсового проекту створена у текстовому редакторі Microsoft Word.

 
ЗМІСТ

ВСТУП	3
РОЗДІЛ 1. ОСНОВНІ ПОНЯТТЯ ТА ВИЗНАЧЕННЯ	4
1.1 Основні відомості про програмний модуль ”Облік кадрів”	4
1.2 Опис засобів програмної реалізації	8
1.3 Постановка задачі	10
РОЗДІЛ 2. ПОКРОКОВА РОЗРОБКА МОДУЛЯ	11
2.1 Проектування UML діаграми	11
2.2 Схема алгоритму програмного модулю	14
2.3 Програмна реалізація модулю “Тетріс на мові Java”	15
РОЗДІЛ 3. КЕРІВНИЦТВО КОРИСТУВАЧА	22
3.1 Системні вимоги до програмного модулю	22
3.2 Керівництво користувача	23
ВИСНОВКИ	28
СПИСОК ВИКОРИСТАНОЇ  ЛІТЕРАТУРИ	29

 
ВСТУП

Ігри завжди привертали увагу людей і є популярним способом проведення вільного часу. Гра Тетріс, розроблена Олексієм Пажитновим у 1984 році, досі не втрачає своєї актуальності та залишається однією з найпопулярніших комп'ютерних ігор.
Метою даної курсової роботи є розробка гри Тетріс мовою програмування Java. Для досягнення цієї мети необхідно вивчити алгоритми і структури даних та ООП, що використовуються при розробці комп'ютерних ігор, а також основні концепції мови Java.
У роботі буде представлено опис процесу розроблення гри Тетріс мовою Java, включно зі створенням графічного інтерфейсу, реалізацією ігрових механік, а також алгоритмами керування ігровим процесом. Крім того, буде розглянуто питання оптимізації продуктивності гри та забезпечення її стабільної роботи.
Результатом цієї курсової роботи буде повноцінна гра Тетріс мовою Java, готова до запуску та використання.




Відпочинок – проведення часу, метою якого є відновлення нормального стану
організму. Одним з видів відпочинку є комп’ютерні ігри. Найбільш популярними
жанрами комп’ютерних ігор є: шутери, стратегії, екшн ігри. Про те, як впливають
ігри на людей, говориться в багатьох посібниках, статтях, газетах і журналах.
Наприклад, нещодавнє дослідження опубліковане в журналі PLоS ONE виявило
користь ігор для людей похилого віку. Саме під час ігор відбувається обдумування
питань, пов’язаних з роботою, побутовими проблемами, здоров’ям. Успішне обмірковування питань, які пов’язані з життям людини, відбувається при
концентрації уваги на одному процесі, в якому ігри грають важливу роль.
	Комп’ютерні ігри – це такі програми, які створені, щоб розважати людину,
займати вільний час. Граючи в комп’ютерні ігри, люди розслабляються, йдуть з
головою у віртуальний світ. в цілому відеоігри не можна вважати повністю
шкідливими або повністю корисними - в тому, як вони діють на мозок, є нюанси,
які залежать як від самої гри, так і від особливостей конкретної людини.
	Популярність комп‘ютерних ігор зростає з кожним роком, ніша ринків
дозвілля постійно потребує поповнень новими ігровими засобами. Ігрова індустрія
постійно розробляє нові інструментальні засоби для полегшення та пришвидшення
процесу розробки ігор. Велика різноманітність, конкурентоздатність, специфічність
використання, зміна актуальності використаних технологій роблять задачу вибору
засобів розробки гри неоднозначною.
	Вищенаведене обумовлює актуальність теми курсового проекту, яка
присвячена розробці ігрового програмного модуля «Тетріс».
 

 
РОЗДІЛ 1. ОСНОВНІ ПОНЯТТЯ ТА ВИЗНАЧЕННЯ

1.1	Основні відомості про гру «Тетріс»
Тетріс є однією з найпопулярніших ігор у світі, яка з'явилася в 1984 році. Ця гра полягає в тому, щоб заповнювати рядки блоками, які падають зверху до нижньої межі поля гри. Гравець може керувати блоками, зміщуючи їх вправо або вліво, повертаючи їх або прискорюючи падіння. Метою гри є заповнення рядків, щоб вони зникли, і таким чином отримати бали. Гра закінчується, якщо блоки досягають верхньої межі поля.
Тетріс можна зіграти на різних платформах, в тому числі на Java. Для написання гри на Java можна використовувати бібліотеку Swing, яка дозволяє створювати графічні інтерфейси користувача (GUI) та забезпечує можливість малювання на екрані. Щоб забезпечити роботу гри, потрібно створити клас, який буде керувати логікою гри, а також клас, який буде керувати графічним інтерфейсом.
Клас, що керує логікою гри, повинен мати методи для обробки рухів блоків, перевірки чи є заповнені рядки, і т.д. Клас, що керує графічним інтерфейсом, повинен мати можливість малювати блоки на екрані, рухати їх, слідкувати за рівнем гри та балами, і т.д. Також потрібно забезпечити можливість управління грою за допомогою клавіш клавіатури або миші.
	В загальному, розробка Тетрісу на Java може бути цікавим та викликом для програмістів, що мають бажання покращити свої навички у використанні програмного модулю "Тетріс" полягає в тому, що він дозволяє користувачеві грати в цю гру безпосередньо на комп'ютері, що значно полегшує доступ до гри та збільшує зручність її використання.
Основні функції програмного модулю "Тетріс" полягають у забезпеченні гравцям зручного і інтуїтивно зрозумілого інтерфейсу, який містить такі елементи, як поле гри, вікно з результатами, кнопки управління тощо. Для більшої зручності гравців, програмний модуль має можливість змінювати складність гри та швидкість падіння фігур.

Основною мовою програмування для створення програмного модулю "Тетріс" є Java. Java є мовою програмування загального призначення, яка використовується для створення різноманітних програмних продуктів, включаючи веб-додатки, мобільні додатки та ігри.
Використання Java для створення програмного модулю "Тетріс" має декілька переваг. По-перше, Java є переносимою мовою програмування, що дозволяє запускати програми, створені на цій мові, на будь-яких операційних системах. По-друге, Java має велику кількість готових бібліотек та інструментів для створення ігор, що дозволяє програмістам швидко розробляти програмний модуль "Тетріс" та робити його більш функціональним.
Таким чином, програмний модуль "Тетріс" на Java є одним з прикладів реалізації класичної гри на цій мові програмування. Його код може складатися з низки класів, що взаємодіють між собою і реалізують різні аспекти гри: ігрове поле, блоки-фігури, рух блоків-фігур, графічний інтерфейс користувача тощо.
Для реалізації гри можна використати таку Java-технологію, як Java Swing.
	Java Swing забезпечує можливості для створення багатофункціональних та привабливих графічних інтерфейсів, включаючи кнопки, поля введення, списки, таблиці, вкладки та інші компоненти. Крім того, Swing дозволяє розробникам створювати власні компоненти та перевизначати стандартні компоненти за потреби.
Swing базується на моделі подій, де користувачі можуть взаємодіяти з графічним інтерфейсом за допомогою подій, що генеруються користувачем, таких як натискання кнопок миші, введення тексту тощо. Розробники можуть відслідковувати ці події та відповідно реагувати на них.
Одним із головних переваг Swing є те, що він є кросплатформовим, тобто код написаний на Java з використанням Swing буде працювати на будь-якій платформі, яка підтримує віртуальну машину Java (JVM). Крім того, Swing має багато функціональних можливостей та добре документований.

У загальному, Java Swing є потужним інструментом для створення графічних інтерфейсів у Java та забезпечує розробникам можливість створювати складні та привабливі GUI додатки.
Загалом, розробка гри на Java може бути цікавим та захоплюючим завданням для програмістів будь-якого рівня, а гра "Тетріс" може бути чудовим вибором для першого досвіду розробки ігор.

1.2 Опис засобів програмної реалізації
Для розробки програмного застосунку "Тетріс" на мові програмування Java було обране середовище розробки Visual Studio Code з використанням JDK. Обираючи це середовище, було враховано наступні переваги:
1.	Visual Studio Code - це зручне і легке у використанні середовище розробки з відкритим вихідним кодом, що підтримує роботу з різними мовами програмування.
2.	Завдяки вбудованому розширенню Java Extension Pack у Visual Studio Code, розробка програмного застосунку на мові Java стала ще більш зручною і швидкою.
3.	JDK (Java Development Kit) - це набір інструментів для розробки програм на мові Java, що включає компілятор, віртуальну машину і інші необхідні для розробки компоненти.
4.	Використання Visual Studio Code з JDK дає можливість розробляти і відлагоджувати програми на мові Java безпосередньо в середовищі розробки.
5.	Visual Studio Code - це безкоштовне середовище розробки, що дозволяє студентам та початківцям розробникам ефективно працювати з проектами на мові Java.
ООП є основою багатьох мов програмування, включаючи Java. За допомогою JDK, можна розробляти та виконувати Java-програми в VS Code. Основними концепціями ООП в Java є класи, об'єкти, успадкування, інкапсуляція та поліморфізм.
Клас в Java - це шаблон, з якого створюються об'єкти. Він містить поля (змінні) та методи (функції), які описують поведінку об'єкта. Об'єкт в Java є екземпляром класу, що містить конкретні значення полів. Інкапсуляція полягає у тому, що дані, що відносяться до класу, зберігаються та обробляються тільки в межах класу та не доступні ззовні.
Успадкування в Java дає можливість створювати новий клас на основі вже існуючого. Новий клас, який успадковує властивості батьківського класу, називається підкласом. Це дозволяє перевикористовувати код та розширювати його можливості.
Поліморфізм означає, що багато класів може мати один метод з однаковою назвою, але з різною реалізацією. Це дає змогу звертатися до методів різних класів однаковою назвою та мати різне поведінку в залежності від класу об'єкта.


1.3 Постановка задачі
Відповідно до теми курсового проекту поставлені наступні завдання:
1.	Дослідити літературу на тему об’єктно – орієнтованого програмування, середовище розробки програмного забезпечення Microsoft Visual Studio Code;
2.	Спроектувати UML-діаграми;
3.	Спроектувати схеми алгоритму;
4.	Розробити програмний модуль гри «2048»;
5.	Створити керівництво користувача.
  
РОЗДІЛ 2. ПОКРОКОВА РОЗРОБКА МОДУЛЯ

2.1 Проектування UML діаграми
Розробка програмного модуля “Тетріс” розпочинається зі створення спеціальної UML-діаграми, що схематично відображає функціонал, а також дії, що в подальшому будуть виконуватись програмою.
IBM Rational Rose – це сучасний інтегрований інструментарій для проектування архітектури, аналізу, моделювання й розробки програмних систем. Саме в IBM Rational Rose мова UML стала базовою технологією візуалізації й розробки програмних систем, що визначило популярність і стратегічну перспективність цього інструментарію.
UML (Unified Modeling Language) – уніфікована мова об'єктно- орієнтованого моделювання, використовується у парадигмі об'єктно- орієнтованого програмування. Є невід'ємною частиною уніфікованого процесу розробки програмного забезпечення.
UML може бути застосовано на всіх етапах життєвого циклу аналізу бізнес- систем і розробки додатків. Різні види діаграм які підтримуються UML, і найбагатший набір можливостей представлення певних аспектів системи робить UML універсальним засобом опису як програмних, так і ділових систем.
Use Case – це сценарна техніка опису взаємодії. За допомогою Use Case може бути описана і призначена вимога для користувача, вимога до взаємодії систем і опис взаємодії людей і компаній в реальному житті.
Актор (Actor) – це абстрактне поняття, що характеризує зовнішнього користувача (користувачів), взаємодіючих із системою. Актор є роллю, що можуть виконувати люди або об’єкти.
Прецедент (Use case) – це короткий опис сценаріїв для одного завдання або
мети.


Рисунок.2.1 – Діаграма прецедентів для модулю “ ”

На цій UML-діаграмі зображено, що програмний модуль буде мати змогу оперувати даними з бази даних, додавати записи, видаляти їх а також відкривати довідку про розробника, оглядати керівництво користувача.
На рис.2.2 зображено діаграму классів для розроблюваного програмного модулю “”.

Рисунок.2.2 – Діаграма класів для модулю “ ”


 
2.2 Схема алгоритму програмного модулю
	Схема алгоритму – це спосіб представлення алгоритму в графічній формі, у вигляді геометричних фігур, сполучених між собою лініями. Форма блока визначає тип дії, а текст всередині блоку дає детальне пояснення конкретної дії.(Схема алгоритму наведена на Рис 2.1).

Рисунок.2.3 – Схема алгоритму програмного модулю
2.3 Програмна реалізація модулю “Облік кадрів”
Програмна реалізація починається зі створення нового проеку Windows VCL Application з додатком в програмі Rad Studio C++ Builder. Вибране ім’я для проекту –слово OblKadr, що символічно в умовах курсового проекту. Після того як рішення створено, відкривається головна сторінка коду елементу StartForm, стартової форми усього проекту, що забезпечує функціонування інших форм. Для зручності, це зображено на Рис.2.3.
 
Рисунок.2.4 – Сторінка конструктора Start_Form та елемент форми
Зліва-знизу, зображуються параметри форми Start_Form.
Ця форма хоч і не явяється функціональною по задачі роботи, вона підтримує у відкритому стані інші компоненти та форми програмного модулю без яких вони не зможуть функціонувати та бути запущені.
Після цієї форми, йде головне меню програми, що виконує функцію відкриття інших компонентів. На його формі йде інформація про версію програмного модулю, а також чотири кнопки, що відкривають наступні форми:
1)	Керівництво користувача.
2)	Переглянути довідку.
3)	Робота зі структурами підприємства.
4)	Завантажити базу кадрів.
5)	Завершити роботу.
Рис.2.5 зображає їх розташування на формі:
 
Рисунок.2.5 – Форма “Main_Menu” та її елементи.
По порядку, далі йде форма “Робота зі структурами підприємства”. Вона представляє з себе частину програмного модулю, в якій виконуються операції з базою даних MS Access. Рис 2.6 відображає її для наглядності.
 
Рисунок.2.6– Форма Struct_Info 
На формі Struct_Info знаходяться такі елементи, як ADOTable, ADOConnection, DataSource1, DBGrid1, та три компонента TButton[9]. 
	ADOTable для успішного виконання своїх цілей та роботи, спочатку потрібно підключити до ADOConnection. Її, в свою чергу потрібно підключити через характеристику ConnectionString, що зображена на Рис 2.7.
 
Рисунок.2.7 – Параметр ConnectionString у підключеній формі.
Якщо два рази натиснути на вищевказане поле, відкриється вікно з вибором типу підключення бази даних до форми(Рис 2.8).
 
Рисунок.2.8 – Вибір варіанту підключення
Після натискання кнопки Build, відкриється вікно з типом включених даних(Рис 2.9), тобто який тип провайдеру до бази даних використати. Так як база даних у нас 2019 року, їй підійде  MS Office 16.0 Access Database Engine OLE DB Provider. Для більш старих версій використовуйте 12.0 а також 4.0 версії провайдерів[10].
 
Рисунок.2.9 – Типи провайдерів даних
Після, нажимаємо кнопку Далее, відкривається нове вікно (Рис.2.10), де у поле “Источник Данних” вказуємо шлях до нашої бази даних, нажимаємо кнопку “Проверить соединение”, для того щоб впевнитись у надійності зв’язку.
 
Рисунок.2.10 – Вікно додавання шляху до бази даних
Коли компонент ADOConnection1 приєднано до бази, можна переходити до ADOTable. У його властивостях, вибираємо у полі Connection нашу ADOConnection1, а у полі TableName вибираємо таблицю “Структури”. Далі, відкриваємо компонент DataSource1, у ньому вказуємо в параметр DataSet нашу ADOTable1. У DBGrid підключаємо DataSource1 для того щоб відображались дані з таблиці “Структури”(Рис 2.11)[10]. 
 
Рисунок.2.11 – Підключена база даних до компоненту DBGrid1
Код форми Struct_Info має такий вигляд:
Підключені біблотеки та компоненти до даної форми:
#include <vcl.h>
#include <StructInfoAdd.h>
#pragma hdrstop
#include "StructInfo.h"
Код для кнопки “Додати нову структуру”:
void __fastcall TStruct_Info::Button1Click(TObject *Sender)
{
   Struct_Info_Add -> Show();
}
//---------------------------------------------------------------------------
Код для кнопки оновлення ADOTable1.
void __fastcall TStruct_Info::Button2Click(TObject *Sender)
{
	ADOTable1 -> Active = false;
	ADOTable1 -> Active = true;
}
Код для видалення вибраного рядку в базі даних
void __fastcall TStruct_Info::Button3Click(TObject *Sender)
{
    ADOTable1 -> Delete();
}
Для того щоб додати нову структуру, потрібно нажати на відповідну кнопку. Тоді, відкриється форма з назвою Struct_Info_Add. У ній пристуні майжеусі компоненти підключення що використовувались у Struct_Info. Також, є 3 компоненти TDBEdit, TDBComboBox1, та 2 TButton. 3 компоненти типу TDBEdit використовуються для вводу даних в таблицю “Структури”, в ComboBox можна вибором випадаючого списку виставити потрібний організаційний рівень структурі(Рис 2.12).
 
Рисунок.2.12 – Вікно для вводу інформації про нову структуру
Код що перемикає режим роботи ADOTable1 та робить можливим додавання нової інформації:
void __fastcall TStruct_Info_Add::FormActivate(TObject *Sender)
{
   ADOTable1 -> Insert();
Дії, що виконуються при натисканні клавіші “Зберегти та вийти”(Подібні є у формі заповнення для працівників(Рис 2.13)):
	ADOTable1 -> Post();
	Struct_Info_Add -> Close();
	Struct_Info -> ADOTable1 -> Active = false;
	Struct_Info -> ADOTable1 -> Active = true;
 
Рисунок.2.13 – Форма вводу інформації до таблиці працівників

РОЗДІЛ 3. КЕРІВНИЦТВО КОРИСТУВАЧА

3.1 Системні вимоги до програмного модулю
До кожної програми завжди існують окремі системні вимоги, що показують здатність ПЗ нормально функціонувати на різних персональних комп’ютерах. В першу чергу, вони визначаються тим наскільки майстерно працює програміст, або тим наскільки велика, тяжка, або неуміло зроблена програма. Через те, що з кожним роком підвищується рівень технічного розвитку комплектуючих для комп’ютерів, розробники мають все більше та більше можливостей для розробки та послаблень зі сторони грамотної розробки. 
Мінімальні системні вимоги – це набір умов, необхідних для можливості запуску і роботи програмного продукту. Проте, наявність мінімальних системних вимог не відміняє можливість запуску ПЗ на комп'ютерах, які за характеристиками слабкіше за мінімальних. 
Рекомендовані системні вимоги – набір характеристик, що мають на увазі оптимальну роботу більшої частини можливостей продукту. Проте, навіть якщо комп'ютер і підходить під рекомендовані системні вимоги, це не означає високої продуктивності ПЗ.
Вимоги до апаратних систем часто визначають версію операційної системи, тип процесора, розмір пам’яті, наявний простір на диску та додаткові периферійні пристрої, якщо такі є необхідними. 
Вимоги до програмного забезпечення, крім вищезазначених вимог, можуть також визначати додаткові залежності від програмного забезпечення (наприклад, бібліотеки, версія драйвера, рамкова версія). Деякі виробники апаратного абопрограмного забезпечення пропонують програму помічника оновлення, яку користувачі можуть завантажувати та запускати, щоб визначити, чи відповідає їх система вимогам продукту
Окрім системних, тут присутні також деякі вимоги з програмної частини. Для того щоб програмний модуль “Облік кадрів” працював коректно, потрібно мати встановленим на персональному комп’ютері  MS Office разом з програмним модулем MS Access. MS Access відіграє важливу роль бази даних для “Облік кадрів”, тому без нього робота неможлива. Самі по собі, програмні модулі розроблені на C++, а саме Windows Standard Applications, невибагливі до апаратної частини  персональних комп’ютерів. 
Використовувати програмний модуль “Облік кадрів” можна лише на операційній системі Windows 10, бо розробка проводилась лише для цієї версії ОС.
Системні вимоги до програмного модулю “Облік кадрів”:
Мінімальні:
Процесор: 1,0 ГГц
Оперативна пам'ять: 128 Мбайт
Відеокарта: DirectX 9-сумісна
Жорсткий диск: 50  Мбайт вільного простору
Рекомендовані:
Процесор: Intel pentium 4 2,4 ГГц
Оперативна пам'ять: 256 Мбайт
Відеокарта: DirectX 9-сумісна
Жорсткий диск диск: 512 Мбайт вільного простору
DirectX: 9
Ці системні вимоги розроблено згідно існуючої версії програмного модулю. Вільне місце на диску може бути менше або більше через те, що сама база даних може містити різну кількість даних. Одна з найбільш важливих частин (критичних) це наявність MS Access, про що було написано вище.

3.2 Керівництво користувача
Перш за все, користувач отримує папку (або архів з папкою) з написом Release. Це значить про те, що у нього програмний модуль випускної версії розробки, а не Debug версія. Після цього, потрібно відкрити папку (або розархівувати .rar файл та відкрити). Файли, що знаходяться в ній матимуть вигляд як на Рис 3.1.
 
Рисунок.3.1 – Вигляд папки з файлами програмного модулю.
Після, користувач має відкрити файл з розширенням .exe під назвою OblKadr (разом це має вигляд OblKadr.exe). Перед користувачем відкриється стартове меню програми(рис 3.2).
 
Рисунок.3.2 – Стартове вікно програми.
Після натискання кнопки Старт, відкриється головне меню програмного модулю.

 
Рисунок.3.3 – Запущене відображення бази даних програмного модулю.
Для роботи з Кадрами, користувач має натиснути кнопку “Завантажити базу кадрів”.
Для роботи з Структурами підприємства, натискається кнопка “Робота зі структурами підприємства”(Рис 3.4).
 
Рисунок.3.4 – Вікна кадрів та структур
 
Для того, щоб додати новий пункт в базу даних, потрібно слідувати по цим пунктам:
1)	Натиснути на кнопку додати нового працівника(структуру).
2)	Обов’язково заповнити усі відповідні поля у формах вводу для працівника(або структури)(рис 3.5).
 
Рисунок.3.5 – Поля для вводу даних у таблицю
3)	Натиснути на кнопку “Зберегти та вийти”.
4)	Оновити таблицю натиснувши на відповідну кнопку.
5)	Новий запис додано до вашої таблиці.
Для видалення стрічки з таблиці даних потрібно:
1)	Натиснути лівою кнопкою миші на необхідну для видалення стрічку.
2)	Натиснути на кнопку “Видалити”.
3)	Після того як запис було видалено, користувач натискає на кнопку “Оновити таблицю”.
Загалом, функцію збереження даних було реалізовано за допомогою кнопки
“Оновити базу даних”, що є однозначно плюсом. Кожний раз, коли користувач оновлюєте базу, шанс на те що ваші дані зникнуть значно зменшується. Завжди перед завершенням роботи бажано зберігати дані(Рис 3.6).
Створений програмний модуль “Облік кадрів” має достатню кількість можливостей для розуміння, а також прямого використання користувачем. Робоча база даних є головним аспектом програми, а доступний інтерфейс дозволяє за лічені хвилини навчити людину використовувати цей програмний модуль
 
Рисунок.3.6 – Збережена таблиця Працівники 
 
ВИСНОВКИ
В результаті виконання курсового проекту по створенню програмного модулю “Облік кадрів”, було освоєно різноманітні джерела інформації а також методи їх використання. Аналітичним методом було досліджено широкий спект сервісів та доступних для освоєння матеріалів з веб, а також написаних авторами ресурсів та книг.
На етапі аналізу вимог, створено концепт майбутньої програми. Програмний модуль “Облік кадрів” є простим та легким для користування аніж сторонні продукти, що занадто складні та вимагають додаткових знань у працівника та зазвичай додаткового налаштування. 
На етапі проектування визначено дії та функції майбутньої програми, схематично визначено скелет ПЗ і створено UML схеми проекту.
Експериментальним методом протягом всього шляху розробки та проектування визначались особливості програмного модулю що до функцій доступних для виконання, а також аналізувалась мова програмування високого рівню для використання у середовищі RAD STUDIO – C++Builder 10.4. 
У результаті кропітливої роботи, був створений програмний модуль на базі Windows Standart App, що відповідав поставленим задачам. Проста за оформлення, але доступна для розуміння будь якого користувача, “Облік кадрів” відкрила достатній спектр функцій для ведення обліку кадрів. Швидкий зв’язок з базою даних дозволив полегшити навантаження ПК, а новітні засоби створення зменшили кількість рядків написаних користувачем.
Створений модуль є гарним прикладом виконання проекту перспективної галузі по обліку кадрів. Як говорилось у вступі, її завдання – полегшити доступ до системи працівників, їх параметрів, таких як заробітна плата, робочі години, і тому подібних, за якими проводиться розрахунок інших дій підприємства або компанії, які напряму впливають на її успішність та темпи розвитку.



СПИСОК ВИКОРИСТАНОЇ  ЛІТЕРАТУРИ
1.	https://business.diia.gov.ua/cases/hr/kadrove-dilovodstvo-vazliva-skladova-efektivnogo-upravlinna-personalom
2.	https://solutions.1c.ru/catalog/agr-buh-bel/features3
3.	https://andeesoft.com/ua/kpu/
4.	http://kadri.chizh.ua/?page_id=1114 /
5.	Троелсен и Джепикс. Язык програмирования С++  и платформы .NET и .NET Core. 2019 р. ДІАЛЕКТИКА, Україна
6.	https://www.embarcadero.com/ru/products/rad-studio 
7.	https://www.e-olymp.com/uк/вlogs/posts/26
8.	https://evergreens.com.ua/ua/articles/uml-diagrams.html
9.	BHV-СПб. Visual C++ на примерах  2006 р. Россия
10.	Культин Н. Б. Самоучитель C++ Builder  2004 р. СамИздат, Россия


МІНІСТЕРСТВО ОСВІТИ І НАУКИ  УКРАЇНИ
ВІДКРИТИЙ МІЖНАРОДНИЙ УНІВЕРСИТЕТ РОЗВИТКУ ЛЮДИНИ «УКРАЇНА»





КУРСОВИЙ ПРОЕКТ

на тему : «Розробка гри Тетріс на мові Java»
з дисципліни: «Об’єктно-орієнтоване програмування»

студента 2 курсу групи ПІ-21-1
спеціальності «Інженерія програмного забезпечення»
Черненка О.О.
Керівник:____________________
(Прізвище та ініціали)
Національна шкала __________________
Кількість балів_________________

  Члени комісії        ______         
(підпис)
                              __________  
 (підпис)
                                    _________   
               (підпис)




Київ 2023 
МІНІСТЕРСТВО ОСВІТИ І НАУКИ  УКРАЇНИ
ВІДКРИТИЙ МІЖНАРОДНИЙ УНІВЕРСИТЕТ РОЗВИТКУ ЛЮДИНИ «УКРАЇНА»

                                                                                      
                                                                              ЗАТВЕРДЖУЮ
Голова циклової комісії інженерії
 						  програмного забезпечення  
                                                                                   ______________ ++++++++++ 
    
(підпис)
                                                                                         «___» ________2022 р.

ІНДИВІДУАЛЬНЕ ЗАВДАННЯ
на курсовий проект
Студента 2 курсу Черненка Олександра Юрійовича
Спеціальності «Інженерія програмного забезпечення»
Тема: «Розробка гри Тетріс на мові Java»
Вихідні дані: Ігровий модуль “Тетріс”
Зміст текстової частини до курсового проекту:
Вступ
Основні поняття та огляд середовища розробки модуля
Покрокова розробка модуля
Керівництво користувача
Висновки
Список використаних джерел

Дата видачі “30” _03_ 2023 р.        	 		 Керівник 	  	        	_______
								 Завдання отримав	_______ 

Тема: Ігровий модуль “ Тетріс на мові Java ”
Календарний план виконання курсового проекту:
№
п/п	Назва етапу курсового проекту	Термін виконання етапу	Примітка
1.	Отримання теми курсового проекту		
2.	Дослідження літератури за темою проекту		
3.	Проектування алгоритму та діаграм		
4.	Розробка візуальної частини модуля		
5.	Програмна реалізація методів		
6.	Створення презентації до захисту, написання доповіді та попередній захист курсового проекту		
7.	Коригування проекту за результатами попереднього захисту		
8.	Захист курсового проекту		


Студент: Черненко Олександр Юрійович
Керівник:  __________
“____” _____________ 2023 р. 

АНОТАЦІЯ

Курсовий проект містить  сторінок,  рисунки, 1 використаних джерел.

КЛЮЧОВІ СЛОВА: ІГРОВИЙ МОДУЛЬ, ГРА, ТЕТРІС, ІГРОВЕ ПОЛЕ, КЕРУВАННЯ ГРОЮ, ГРАФІКА, АНІМАЦІЯ, JAVA, JDK, VISUAL STUDIO CODE.

Предмет дослідження – ігровий модуль Тетріс на мові Java.
Мета проекту – ознайомлення з середовищем розробки Visual Studio Code, з подальшим виконанням у ньому ігрового модулю, а також вивчення загальних умов побудови програмного забезпечення, методів проектування та розробки; вивчення та засвоєння основ роботи з методами візуального програмування; самостійне визначення функцій та дотримання умов розробки програмного забезпечення, супровід та налагодження сучасного програмного забезпечення з використанням загальних методів розробки візуальних програм.
Курсовий проект виконаний в Visual Studio Code пояснювальна записка до курсового проекту створена у текстовому редакторі Microsoft Word.

 
ЗМІСТ

ВСТУП	3
РОЗДІЛ 1. ОСНОВНІ ПОНЯТТЯ ТА ВИЗНАЧЕННЯ	4
1.1 Основні відомості про програмний модуль ”Облік кадрів”	4
1.2 Опис засобів програмної реалізації	8
1.3 Постановка задачі	10
РОЗДІЛ 2. ПОКРОКОВА РОЗРОБКА МОДУЛЯ	11
2.1 Проектування UML діаграми	11
2.2 Схема алгоритму програмного модулю	14
2.3 Програмна реалізація модулю “Тетріс на мові Java”	15
РОЗДІЛ 3. КЕРІВНИЦТВО КОРИСТУВАЧА	22
3.1 Системні вимоги до програмного модулю	22
3.2 Керівництво користувача	23
ВИСНОВКИ	28
СПИСОК ВИКОРИСТАНОЇ  ЛІТЕРАТУРИ	29

 
ВСТУП

Ігри завжди привертали увагу людей і є популярним способом проведення вільного часу. Гра Тетріс, розроблена Олексієм Пажитновим у 1984 році, досі не втрачає своєї актуальності та залишається однією з найпопулярніших комп'ютерних ігор.
Метою даної курсової роботи є розробка гри Тетріс мовою програмування Java. Для досягнення цієї мети необхідно вивчити алгоритми і структури даних та ООП, що використовуються при розробці комп'ютерних ігор, а також основні концепції мови Java.
У роботі буде представлено опис процесу розроблення гри Тетріс мовою Java, включно зі створенням графічного інтерфейсу, реалізацією ігрових механік, а також алгоритмами керування ігровим процесом. Крім того, буде розглянуто питання оптимізації продуктивності гри та забезпечення її стабільної роботи.
Результатом цієї курсової роботи буде повноцінна гра Тетріс мовою Java, готова до запуску та використання.




Відпочинок – проведення часу, метою якого є відновлення нормального стану
організму. Одним з видів відпочинку є комп’ютерні ігри. Найбільш популярними
жанрами комп’ютерних ігор є: шутери, стратегії, екшн ігри. Про те, як впливають
ігри на людей, говориться в багатьох посібниках, статтях, газетах і журналах.
Наприклад, нещодавнє дослідження опубліковане в журналі PLоS ONE виявило
користь ігор для людей похилого віку. Саме під час ігор відбувається обдумування
питань, пов’язаних з роботою, побутовими проблемами, здоров’ям. Успішне обмірковування питань, які пов’язані з життям людини, відбувається при
концентрації уваги на одному процесі, в якому ігри грають важливу роль.
	Комп’ютерні ігри – це такі програми, які створені, щоб розважати людину,
займати вільний час. Граючи в комп’ютерні ігри, люди розслабляються, йдуть з
головою у віртуальний світ. в цілому відеоігри не можна вважати повністю
шкідливими або повністю корисними - в тому, як вони діють на мозок, є нюанси,
які залежать як від самої гри, так і від особливостей конкретної людини.
	Популярність комп‘ютерних ігор зростає з кожним роком, ніша ринків
дозвілля постійно потребує поповнень новими ігровими засобами. Ігрова індустрія
постійно розробляє нові інструментальні засоби для полегшення та пришвидшення
процесу розробки ігор. Велика різноманітність, конкурентоздатність, специфічність
використання, зміна актуальності використаних технологій роблять задачу вибору
засобів розробки гри неоднозначною.
	Вищенаведене обумовлює актуальність теми курсового проекту, яка
присвячена розробці ігрового програмного модуля «Тетріс».
 

 
РОЗДІЛ 1. ОСНОВНІ ПОНЯТТЯ ТА ВИЗНАЧЕННЯ

1.1	Основні відомості про гру «Тетріс»
Тетріс є однією з найпопулярніших ігор у світі, яка з'явилася в 1984 році. Ця гра полягає в тому, щоб заповнювати рядки блоками, які падають зверху до нижньої межі поля гри. Гравець може керувати блоками, зміщуючи їх вправо або вліво, повертаючи їх або прискорюючи падіння. Метою гри є заповнення рядків, щоб вони зникли, і таким чином отримати бали. Гра закінчується, якщо блоки досягають верхньої межі поля.
Тетріс можна зіграти на різних платформах, в тому числі на Java. Для написання гри на Java можна використовувати бібліотеку Swing, яка дозволяє створювати графічні інтерфейси користувача (GUI) та забезпечує можливість малювання на екрані. Щоб забезпечити роботу гри, потрібно створити клас, який буде керувати логікою гри, а також клас, який буде керувати графічним інтерфейсом.
Клас, що керує логікою гри, повинен мати методи для обробки рухів блоків, перевірки чи є заповнені рядки, і т.д. Клас, що керує графічним інтерфейсом, повинен мати можливість малювати блоки на екрані, рухати їх, слідкувати за рівнем гри та балами, і т.д. Також потрібно забезпечити можливість управління грою за допомогою клавіш клавіатури або миші.
	В загальному, розробка Тетрісу на Java може бути цікавим та викликом для програмістів, що мають бажання покращити свої навички у використанні програмного модулю "Тетріс" полягає в тому, що він дозволяє користувачеві грати в цю гру безпосередньо на комп'ютері, що значно полегшує доступ до гри та збільшує зручність її використання.
Основні функції програмного модулю "Тетріс" полягають у забезпеченні гравцям зручного і інтуїтивно зрозумілого інтерфейсу, який містить такі елементи, як поле гри, вікно з результатами, кнопки управління тощо. Для більшої зручності гравців, програмний модуль має можливість змінювати складність гри та швидкість падіння фігур.

Основною мовою програмування для створення програмного модулю "Тетріс" є Java. Java є мовою програмування загального призначення, яка використовується для створення різноманітних програмних продуктів, включаючи веб-додатки, мобільні додатки та ігри.
Використання Java для створення програмного модулю "Тетріс" має декілька переваг. По-перше, Java є переносимою мовою програмування, що дозволяє запускати програми, створені на цій мові, на будь-яких операційних системах. По-друге, Java має велику кількість готових бібліотек та інструментів для створення ігор, що дозволяє програмістам швидко розробляти програмний модуль "Тетріс" та робити його більш функціональним.
Таким чином, програмний модуль "Тетріс" на Java є одним з прикладів реалізації класичної гри на цій мові програмування. Його код може складатися з низки класів, що взаємодіють між собою і реалізують різні аспекти гри: ігрове поле, блоки-фігури, рух блоків-фігур, графічний інтерфейс користувача тощо.
Для реалізації гри можна використати таку Java-технологію, як Java Swing.
	Java Swing забезпечує можливості для створення багатофункціональних та привабливих графічних інтерфейсів, включаючи кнопки, поля введення, списки, таблиці, вкладки та інші компоненти. Крім того, Swing дозволяє розробникам створювати власні компоненти та перевизначати стандартні компоненти за потреби.
Swing базується на моделі подій, де користувачі можуть взаємодіяти з графічним інтерфейсом за допомогою подій, що генеруються користувачем, таких як натискання кнопок миші, введення тексту тощо. Розробники можуть відслідковувати ці події та відповідно реагувати на них.
Одним із головних переваг Swing є те, що він є кросплатформовим, тобто код написаний на Java з використанням Swing буде працювати на будь-якій платформі, яка підтримує віртуальну машину Java (JVM). Крім того, Swing має багато функціональних можливостей та добре документований.

У загальному, Java Swing є потужним інструментом для створення графічних інтерфейсів у Java та забезпечує розробникам можливість створювати складні та привабливі GUI додатки.
Загалом, розробка гри на Java може бути цікавим та захоплюючим завданням для програмістів будь-якого рівня, а гра "Тетріс" може бути чудовим вибором для першого досвіду розробки ігор.

1.2 Опис засобів програмної реалізації
Для розробки програмного застосунку "Тетріс" на мові програмування Java було обране середовище розробки Visual Studio Code з використанням JDK. Обираючи це середовище, було враховано наступні переваги:
1.	Visual Studio Code - це зручне і легке у використанні середовище розробки з відкритим вихідним кодом, що підтримує роботу з різними мовами програмування.
2.	Завдяки вбудованому розширенню Java Extension Pack у Visual Studio Code, розробка програмного застосунку на мові Java стала ще більш зручною і швидкою.
3.	JDK (Java Development Kit) - це набір інструментів для розробки програм на мові Java, що включає компілятор, віртуальну машину і інші необхідні для розробки компоненти.
4.	Використання Visual Studio Code з JDK дає можливість розробляти і відлагоджувати програми на мові Java безпосередньо в середовищі розробки.
5.	Visual Studio Code - це безкоштовне середовище розробки, що дозволяє студентам та початківцям розробникам ефективно працювати з проектами на мові Java.
ООП є основою багатьох мов програмування, включаючи Java. За допомогою JDK, можна розробляти та виконувати Java-програми в VS Code. Основними концепціями ООП в Java є класи, об'єкти, успадкування, інкапсуляція та поліморфізм.
Клас в Java - це шаблон, з якого створюються об'єкти. Він містить поля (змінні) та методи (функції), які описують поведінку об'єкта. Об'єкт в Java є екземпляром класу, що містить конкретні значення полів. Інкапсуляція полягає у тому, що дані, що відносяться до класу, зберігаються та обробляються тільки в межах класу та не доступні ззовні.
Успадкування в Java дає можливість створювати новий клас на основі вже існуючого. Новий клас, який успадковує властивості батьківського класу, називається підкласом. Це дозволяє перевикористовувати код та розширювати його можливості.
Поліморфізм означає, що багато класів може мати один метод з однаковою назвою, але з різною реалізацією. Це дає змогу звертатися до методів різних класів однаковою назвою та мати різне поведінку в залежності від класу об'єкта.


1.3 Постановка задачі
Відповідно до теми курсового проекту поставлені наступні завдання:
1.	Дослідити літературу на тему об’єктно – орієнтованого програмування, середовище розробки програмного забезпечення Microsoft Visual Studio Code;
2.	Спроектувати UML-діаграми;
3.	Спроектувати схеми алгоритму;
4.	Розробити програмний модуль гри «2048»;
5.	Створити керівництво користувача.
  
РОЗДІЛ 2. ПОКРОКОВА РОЗРОБКА МОДУЛЯ

2.1 Проектування UML діаграми
Розробка програмного модуля “Тетріс” розпочинається зі створення спеціальної UML-діаграми, що схематично відображає функціонал, а також дії, що в подальшому будуть виконуватись програмою.
IBM Rational Rose – це сучасний інтегрований інструментарій для проектування архітектури, аналізу, моделювання й розробки програмних систем. Саме в IBM Rational Rose мова UML стала базовою технологією візуалізації й розробки програмних систем, що визначило популярність і стратегічну перспективність цього інструментарію.
UML (Unified Modeling Language) – уніфікована мова об'єктно- орієнтованого моделювання, використовується у парадигмі об'єктно- орієнтованого програмування. Є невід'ємною частиною уніфікованого процесу розробки програмного забезпечення.
UML може бути застосовано на всіх етапах життєвого циклу аналізу бізнес- систем і розробки додатків. Різні види діаграм які підтримуються UML, і найбагатший набір можливостей представлення певних аспектів системи робить UML універсальним засобом опису як програмних, так і ділових систем.
Use Case – це сценарна техніка опису взаємодії. За допомогою Use Case може бути описана і призначена вимога для користувача, вимога до взаємодії систем і опис взаємодії людей і компаній в реальному житті.
Актор (Actor) – це абстрактне поняття, що характеризує зовнішнього користувача (користувачів), взаємодіючих із системою. Актор є роллю, що можуть виконувати люди або об’єкти.
Прецедент (Use case) – це короткий опис сценаріїв для одного завдання або
мети.


Рисунок.2.1 – Діаграма прецедентів для модулю “ ”

На цій UML-діаграмі зображено, що програмний модуль буде мати змогу оперувати даними з бази даних, додавати записи, видаляти їх а також відкривати довідку про розробника, оглядати керівництво користувача.
На рис.2.2 зображено діаграму классів для розроблюваного програмного модулю “”.

Рисунок.2.2 – Діаграма класів для модулю “ ”


 
2.2 Схема алгоритму програмного модулю
	Схема алгоритму – це спосіб представлення алгоритму в графічній формі, у вигляді геометричних фігур, сполучених між собою лініями. Форма блока визначає тип дії, а текст всередині блоку дає детальне пояснення конкретної дії.(Схема алгоритму наведена на Рис 2.1).

Рисунок.2.3 – Схема алгоритму програмного модулю
2.3 Програмна реалізація модулю “Облік кадрів”
Програмна реалізація починається зі створення нового проеку Windows VCL Application з додатком в програмі Rad Studio C++ Builder. Вибране ім’я для проекту –слово OblKadr, що символічно в умовах курсового проекту. Після того як рішення створено, відкривається головна сторінка коду елементу StartForm, стартової форми усього проекту, що забезпечує функціонування інших форм. Для зручності, це зображено на Рис.2.3.
 
Рисунок.2.4 – Сторінка конструктора Start_Form та елемент форми
Зліва-знизу, зображуються параметри форми Start_Form.
Ця форма хоч і не явяється функціональною по задачі роботи, вона підтримує у відкритому стані інші компоненти та форми програмного модулю без яких вони не зможуть функціонувати та бути запущені.
Після цієї форми, йде головне меню програми, що виконує функцію відкриття інших компонентів. На його формі йде інформація про версію програмного модулю, а також чотири кнопки, що відкривають наступні форми:
1)	Керівництво користувача.
2)	Переглянути довідку.
3)	Робота зі структурами підприємства.
4)	Завантажити базу кадрів.
5)	Завершити роботу.
Рис.2.5 зображає їх розташування на формі:
 
Рисунок.2.5 – Форма “Main_Menu” та її елементи.
По порядку, далі йде форма “Робота зі структурами підприємства”. Вона представляє з себе частину програмного модулю, в якій виконуються операції з базою даних MS Access. Рис 2.6 відображає її для наглядності.
 
Рисунок.2.6– Форма Struct_Info 
На формі Struct_Info знаходяться такі елементи, як ADOTable, ADOConnection, DataSource1, DBGrid1, та три компонента TButton[9]. 
	ADOTable для успішного виконання своїх цілей та роботи, спочатку потрібно підключити до ADOConnection. Її, в свою чергу потрібно підключити через характеристику ConnectionString, що зображена на Рис 2.7.
 
Рисунок.2.7 – Параметр ConnectionString у підключеній формі.
Якщо два рази натиснути на вищевказане поле, відкриється вікно з вибором типу підключення бази даних до форми(Рис 2.8).
 
Рисунок.2.8 – Вибір варіанту підключення
Після натискання кнопки Build, відкриється вікно з типом включених даних(Рис 2.9), тобто який тип провайдеру до бази даних використати. Так як база даних у нас 2019 року, їй підійде  MS Office 16.0 Access Database Engine OLE DB Provider. Для більш старих версій використовуйте 12.0 а також 4.0 версії провайдерів[10].
 
Рисунок.2.9 – Типи провайдерів даних
Після, нажимаємо кнопку Далее, відкривається нове вікно (Рис.2.10), де у поле “Источник Данних” вказуємо шлях до нашої бази даних, нажимаємо кнопку “Проверить соединение”, для того щоб впевнитись у надійності зв’язку.
 
Рисунок.2.10 – Вікно додавання шляху до бази даних
Коли компонент ADOConnection1 приєднано до бази, можна переходити до ADOTable. У його властивостях, вибираємо у полі Connection нашу ADOConnection1, а у полі TableName вибираємо таблицю “Структури”. Далі, відкриваємо компонент DataSource1, у ньому вказуємо в параметр DataSet нашу ADOTable1. У DBGrid підключаємо DataSource1 для того щоб відображались дані з таблиці “Структури”(Рис 2.11)[10]. 
 
Рисунок.2.11 – Підключена база даних до компоненту DBGrid1
Код форми Struct_Info має такий вигляд:
Підключені біблотеки та компоненти до даної форми:
#include <vcl.h>
#include <StructInfoAdd.h>
#pragma hdrstop
#include "StructInfo.h"
Код для кнопки “Додати нову структуру”:
void __fastcall TStruct_Info::Button1Click(TObject *Sender)
{
   Struct_Info_Add -> Show();
}
//---------------------------------------------------------------------------
Код для кнопки оновлення ADOTable1.
void __fastcall TStruct_Info::Button2Click(TObject *Sender)
{
	ADOTable1 -> Active = false;
	ADOTable1 -> Active = true;
}
Код для видалення вибраного рядку в базі даних
void __fastcall TStruct_Info::Button3Click(TObject *Sender)
{
    ADOTable1 -> Delete();
}
Для того щоб додати нову структуру, потрібно нажати на відповідну кнопку. Тоді, відкриється форма з назвою Struct_Info_Add. У ній пристуні майжеусі компоненти підключення що використовувались у Struct_Info. Також, є 3 компоненти TDBEdit, TDBComboBox1, та 2 TButton. 3 компоненти типу TDBEdit використовуються для вводу даних в таблицю “Структури”, в ComboBox можна вибором випадаючого списку виставити потрібний організаційний рівень структурі(Рис 2.12).
 
Рисунок.2.12 – Вікно для вводу інформації про нову структуру
Код що перемикає режим роботи ADOTable1 та робить можливим додавання нової інформації:
void __fastcall TStruct_Info_Add::FormActivate(TObject *Sender)
{
   ADOTable1 -> Insert();
Дії, що виконуються при натисканні клавіші “Зберегти та вийти”(Подібні є у формі заповнення для працівників(Рис 2.13)):
	ADOTable1 -> Post();
	Struct_Info_Add -> Close();
	Struct_Info -> ADOTable1 -> Active = false;
	Struct_Info -> ADOTable1 -> Active = true;
 
Рисунок.2.13 – Форма вводу інформації до таблиці працівників

РОЗДІЛ 3. КЕРІВНИЦТВО КОРИСТУВАЧА

3.1 Системні вимоги до програмного модулю
До кожної програми завжди існують окремі системні вимоги, що показують здатність ПЗ нормально функціонувати на різних персональних комп’ютерах. В першу чергу, вони визначаються тим наскільки майстерно працює програміст, або тим наскільки велика, тяжка, або неуміло зроблена програма. Через те, що з кожним роком підвищується рівень технічного розвитку комплектуючих для комп’ютерів, розробники мають все більше та більше можливостей для розробки та послаблень зі сторони грамотної розробки. 
Мінімальні системні вимоги – це набір умов, необхідних для можливості запуску і роботи програмного продукту. Проте, наявність мінімальних системних вимог не відміняє можливість запуску ПЗ на комп'ютерах, які за характеристиками слабкіше за мінімальних. 
Рекомендовані системні вимоги – набір характеристик, що мають на увазі оптимальну роботу більшої частини можливостей продукту. Проте, навіть якщо комп'ютер і підходить під рекомендовані системні вимоги, це не означає високої продуктивності ПЗ.
Вимоги до апаратних систем часто визначають версію операційної системи, тип процесора, розмір пам’яті, наявний простір на диску та додаткові периферійні пристрої, якщо такі є необхідними. 
Вимоги до програмного забезпечення, крім вищезазначених вимог, можуть також визначати додаткові залежності від програмного забезпечення (наприклад, бібліотеки, версія драйвера, рамкова версія). Деякі виробники апаратного абопрограмного забезпечення пропонують програму помічника оновлення, яку користувачі можуть завантажувати та запускати, щоб визначити, чи відповідає їх система вимогам продукту
Окрім системних, тут присутні також деякі вимоги з програмної частини. Для того щоб програмний модуль “Облік кадрів” працював коректно, потрібно мати встановленим на персональному комп’ютері  MS Office разом з програмним модулем MS Access. MS Access відіграє важливу роль бази даних для “Облік кадрів”, тому без нього робота неможлива. Самі по собі, програмні модулі розроблені на C++, а саме Windows Standard Applications, невибагливі до апаратної частини  персональних комп’ютерів. 
Використовувати програмний модуль “Облік кадрів” можна лише на операційній системі Windows 10, бо розробка проводилась лише для цієї версії ОС.
Системні вимоги до програмного модулю “Облік кадрів”:
Мінімальні:
Процесор: 1,0 ГГц
Оперативна пам'ять: 128 Мбайт
Відеокарта: DirectX 9-сумісна
Жорсткий диск: 50  Мбайт вільного простору
Рекомендовані:
Процесор: Intel pentium 4 2,4 ГГц
Оперативна пам'ять: 256 Мбайт
Відеокарта: DirectX 9-сумісна
Жорсткий диск диск: 512 Мбайт вільного простору
DirectX: 9
Ці системні вимоги розроблено згідно існуючої версії програмного модулю. Вільне місце на диску може бути менше або більше через те, що сама база даних може містити різну кількість даних. Одна з найбільш важливих частин (критичних) це наявність MS Access, про що було написано вище.

3.2 Керівництво користувача
Перш за все, користувач отримує папку (або архів з папкою) з написом Release. Це значить про те, що у нього програмний модуль випускної версії розробки, а не Debug версія. Після цього, потрібно відкрити папку (або розархівувати .rar файл та відкрити). Файли, що знаходяться в ній матимуть вигляд як на Рис 3.1.
 
Рисунок.3.1 – Вигляд папки з файлами програмного модулю.
Після, користувач має відкрити файл з розширенням .exe під назвою OblKadr (разом це має вигляд OblKadr.exe). Перед користувачем відкриється стартове меню програми(рис 3.2).
 
Рисунок.3.2 – Стартове вікно програми.
Після натискання кнопки Старт, відкриється головне меню програмного модулю.

 
Рисунок.3.3 – Запущене відображення бази даних програмного модулю.
Для роботи з Кадрами, користувач має натиснути кнопку “Завантажити базу кадрів”.
Для роботи з Структурами підприємства, натискається кнопка “Робота зі структурами підприємства”(Рис 3.4).
 
Рисунок.3.4 – Вікна кадрів та структур
 
Для того, щоб додати новий пункт в базу даних, потрібно слідувати по цим пунктам:
1)	Натиснути на кнопку додати нового працівника(структуру).
2)	Обов’язково заповнити усі відповідні поля у формах вводу для працівника(або структури)(рис 3.5).
 
Рисунок.3.5 – Поля для вводу даних у таблицю
3)	Натиснути на кнопку “Зберегти та вийти”.
4)	Оновити таблицю натиснувши на відповідну кнопку.
5)	Новий запис додано до вашої таблиці.
Для видалення стрічки з таблиці даних потрібно:
1)	Натиснути лівою кнопкою миші на необхідну для видалення стрічку.
2)	Натиснути на кнопку “Видалити”.
3)	Після того як запис було видалено, користувач натискає на кнопку “Оновити таблицю”.
Загалом, функцію збереження даних було реалізовано за допомогою кнопки
“Оновити базу даних”, що є однозначно плюсом. Кожний раз, коли користувач оновлюєте базу, шанс на те що ваші дані зникнуть значно зменшується. Завжди перед завершенням роботи бажано зберігати дані(Рис 3.6).
Створений програмний модуль “Облік кадрів” має достатню кількість можливостей для розуміння, а також прямого використання користувачем. Робоча база даних є головним аспектом програми, а доступний інтерфейс дозволяє за лічені хвилини навчити людину використовувати цей програмний модуль
 
Рисунок.3.6 – Збережена таблиця Працівники 
 
ВИСНОВКИ
В результаті виконання курсового проекту по створенню програмного модулю “Облік кадрів”, було освоєно різноманітні джерела інформації а також методи їх використання. Аналітичним методом було досліджено широкий спект сервісів та доступних для освоєння матеріалів з веб, а також написаних авторами ресурсів та книг.
На етапі аналізу вимог, створено концепт майбутньої програми. Програмний модуль “Облік кадрів” є простим та легким для користування аніж сторонні продукти, що занадто складні та вимагають додаткових знань у працівника та зазвичай додаткового налаштування. 
На етапі проектування визначено дії та функції майбутньої програми, схематично визначено скелет ПЗ і створено UML схеми проекту.
Експериментальним методом протягом всього шляху розробки та проектування визначались особливості програмного модулю що до функцій доступних для виконання, а також аналізувалась мова програмування високого рівню для використання у середовищі RAD STUDIO – C++Builder 10.4. 
У результаті кропітливої роботи, був створений програмний модуль на базі Windows Standart App, що відповідав поставленим задачам. Проста за оформлення, але доступна для розуміння будь якого користувача, “Облік кадрів” відкрила достатній спектр функцій для ведення обліку кадрів. Швидкий зв’язок з базою даних дозволив полегшити навантаження ПК, а новітні засоби створення зменшили кількість рядків написаних користувачем.
Створений модуль є гарним прикладом виконання проекту перспективної галузі по обліку кадрів. Як говорилось у вступі, її завдання – полегшити доступ до системи працівників, їх параметрів, таких як заробітна плата, робочі години, і тому подібних, за якими проводиться розрахунок інших дій підприємства або компанії, які напряму впливають на її успішність та темпи розвитку.



СПИСОК ВИКОРИСТАНОЇ  ЛІТЕРАТУРИ
1.	https://business.diia.gov.ua/cases/hr/kadrove-dilovodstvo-vazliva-skladova-efektivnogo-upravlinna-personalom
2.	https://solutions.1c.ru/catalog/agr-buh-bel/features3
3.	https://andeesoft.com/ua/kpu/
4.	http://kadri.chizh.ua/?page_id=1114 /
5.	Троелсен и Джепикс. Язык програмирования С++  и платформы .NET и .NET Core. 2019 р. ДІАЛЕКТИКА, Україна
6.	https://www.embarcadero.com/ru/products/rad-studio 
7.	https://www.e-olymp.com/uк/вlogs/posts/26
8.	https://evergreens.com.ua/ua/articles/uml-diagrams.html
9.	BHV-СПб. Visual C++ на примерах  2006 р. Россия
10.	Культин Н. Б. Самоучитель C++ Builder  2004 р. СамИздат, Россия


